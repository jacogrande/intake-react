{"version":3,"sources":["util/api.ts","Components/Snackbar.tsx","redux/modules/user.ts","redux/modules/stats.ts","redux/modules/movies.ts","Components/CopyMovie.tsx","Components/RateMovie.tsx","Components/AddMovieDrawer.tsx","Components/Header.tsx","Components/Movies.tsx","Components/Charts/Pie.tsx","Components/Charts/ViewingTimeline.tsx","Components/Charts/ReleaseTimeline.tsx","Components/Breadcrumbs.tsx","Components/Stats.tsx","Components/EditMovie.tsx","Components/DeleteMovie.tsx","Components/MovieRatings.tsx","Components/Login.tsx","Components/CreateAccount.tsx","Components/Logout.tsx","Components/DeleteAccount.tsx","redux/modules/explore.ts","Components/Friends.tsx","Components/ProfileFeed.tsx","Components/Profile.tsx","Components/ResetPassword.tsx","Components/ExploreComponents/ViewProfile.tsx","Components/ExploreComponents/UserFeed.tsx","Components/ExploreComponents/Users.tsx","Components/ExploreComponents/Feed.tsx","Components/ExploreComponents/MovieFeed.tsx","Components/ExploreComponents/TopMovies.tsx","Components/Explore.tsx","Components/Charts/Bubble.tsx","Components/StatProperty.tsx","Components/Loading.tsx","Components/ProtectedRoute.tsx","Components/LoggedOutRoute.tsx","Components/Jumbotron.tsx","Components/LandingPage.tsx","Components/Verify.tsx","App.tsx","serviceWorker.ts","redux/index.ts","index.tsx"],"names":["searchMovies","title","a","fetch","results","status","json","data","Error","SnackbarComponent","props","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","handleClose","message","error","success","action","Fragment","IconButton","size","aria-label","color","onClick","fontSize","typedAction","type","payload","initialState","username","upvoted_reviews","avatar","reviews","friends","friend_requests","favorite_movie","guest","_id","login","logout","addFriend","checkSessionLogin","console","log","dispatch","response","genres","contentRatings","datesAdded","releaseDates","themes","ratings","setGenres","setContentRatings","setDatesAdded","setReleaseDates","setThemes","setRatings","movies","topMoviesByPopularity","topMoviesByEntertainment","topMoviesByBias","topMoviesByPlot","topMoviesByStyle","topMoviesByTotal","filter","search","searchResults","setSearch","setSearchResults","query","setTopMoviesAction","setFilter","getTopMovies","setTopMovies","setMovies","loadMovies","connect","state","user","bindActionCreators","React","useState","entertainment","setEntertainment","plot","setPlot","style","setStyle","bias","setBias","Date","dateViewed","setDateViewed","setError","setOpen","className","src","movie","poster","alt","to","handleSubmit","e","preventDefault","method","body","JSON","stringify","id","entertainment_rating","parseInt","plot_rating","style_rating","bias_rating","date","headers","closeDrawer","ratingData","changeHandler","target","value","rating","autoComplete","onSubmit","map","i","key","aria-labelledby","onChange","theme","placeholder","index","updatedThemes","handleThemeChange","splice","handleThemeDelete","prev","selected","imdbid","imdbID","Poster","Title","AddMovieModal","selectedMovie","setSelectedMovie","searchData","propMovie","CopyMovie","RateMovie","handlePosterClick","anchorEl","setAnchorEl","openDrawer","landing","useLocation","pathname","loggedInHeader","activeClassName","length","Tooltip","loggedOutHeader","mobileLoggedOutHeader","MenuItem","mobileLoggedInHeader","AppBar","position","Toolbar","exact","edge","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","Boolean","Drawer","anchor","AddMovieDrawer","useEffect","sort","b","aDate","date_added","getTime","bDate","total_rating","noMovies","hasMovies","name","content","isMobile","isBrowser","height","offset","once","substring","Pie","stats","setStats","count","setCount","colors","Math","floor","random","muiTheme","createMuiTheme","overrides","MuiSlider","thumb","track","rail","opacity","valueLabel","mark","markActive","topX","topXTotal","total","reduce","sum","others","othersTotal","formatPieData","concat","lastVal","titleExtension","ThemeProvider","Slider","defaultValue","getAriaValueText","toLowerCase","valueLabelDisplay","step","marks","min","max","width","val","handleSliderChange","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","from","slicesLabelsSkipAngle","slicesLabelsTextColor","tooltip","backgroundColor","label","percentage","months","ViewingTimeline","startDate","moment","now","format","endDate","lineData","setLineData","calendarData","setCalendarData","organizedDates","arr","group","forEach","realDate","year","month","push","organizeDates","dates","m","x","y","dayDict","formattedDate","day","calendarDates","point","borderColor","xScale","yScale","stacked","reverse","curve","axisTop","axisRight","grid","line","stroke","axis","legend","text","fill","itemTextColor","ticks","strokeWidth","textColor","domain","crosshair","strokeOpacity","axisBottom","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","axisLeft","tickValues","lineWidth","pointSize","pointColor","pointBorderWidth","pointBorderColor","pointLabel","pointLabelYOffset","areaOpacity","useMesh","enableGridX","enableGridY","emptyColor","yearSpacing","monthBorderColor","dayBorderWidth","dayBorderColor","minValue","maxValue","legends","direction","translateY","itemCount","itemWidth","itemHeight","itemsSpacing","itemDirection","symbolBorderColor","ReleaseTimeline","dateDict","earliest","acc","latest","getFullYear","ceil","toString","Breadcrumbs","crumbs","crumb","href","toLocaleString","maximumFractionDigits","sortStats","topFive","otherStats","titleMapping","director","writer","rated","runtime","useParams","property","movieList","setMovieList","Array","isArray","includes","getStats","themeDict","entertainment_average","plot_average","style_average","bias_average","total_average","divisor","datesReleased","genreDict","contentRatingsDict","genre","sortedThemes","averagedRatings","Number","sortedGenres","sortedContent","sortedValues","closeDialog","Dialog","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","DeleteReview","showReviews","setShowReviews","newReview","setNewReview","drawerOpen","setDrawerOpen","dialogOpen","setDialogOpen","deleteReviewOpen","setDeleteReviewOpen","editing","setEditing","selectedReview","setSelectedReview","find","entertainmentElements","plotElements","styleElements","biasElements","ratingOrder","source","handleReviewSubmit","review","handleReviewEdit","upvoteReview","vote","deleteReview","upvotes","event","EditMovie","DeleteMovie","onKeyDown","keyCode","upvoted_by","editReview","showPassword","setShowPassword","setUsername","password","setPassword","verify","setVerify","mapDispatchToProps","showComfirmPassword","setShowComfirmPassword","email","setEmail","comfirmPassword","setComfirmPassword","currentUser","topUsersByFriends","topUsersByMovies","topUsersByReviews","topUsersByDateAddedOldest","topUsersByDateAddedNewest","feed","setCurrentUser","getFeed","getTopUsers","filterActions","users","setTopUsers","loadProfile","setSearchKey","friendResults","setFriendResults","friend","requestContent","acceptRequest","tilemap","row","col","exploreMovies","setResults","uMovie","handleClick","openLogoutDialog","setOpenLogoutDialog","openDeleteDialog","setOpenDeleteDialog","setOpenDrawer","section","DeleteAccount","Logout","Friends","ResetPassword","loading","setLoading","validToken","setValidToken","finished","setFinished","snackbarOpen","setSnackbarOpen","errorMessage","setErrorMessage","token","asyncOps","handlePasswordReset","FavoriteMovie","explore","addOpen","setAddOpen","selectedUser","setSelectedUser","err","isFriend","date_registered","handleAddFriend","setUsers","entry","user_id","userMovies","entertainment_rating_average","plot_rating_average","style_rating_average","bias_rating_average","total_rating_average","formattedMovie","Object","assign","ratings_length","filterMap","popularity","setSection","Bubble","memo","bubbleColors","setData","sortedData","setSortedData","root","children","formatted","values","allKeys","keys","lowestValue","loc","formatData","highestValue","reducer","colorFunc","container","padding","identity","labelSkipRadius","labelTextColor","borderWidth","animate","motionStiffness","motionDamping","isZoomable","onMouseEnter","entity","link","Genres","Themes","Directors","Runtimes","Writers","Years","setValues","listOpen","setListOpen","emptySearch","setEmptySearch","addValue","entities","result","subEntities","toFixed","breadcrumbData","ClickAwayListener","onClickAway","List","component","display","marginLeft","ListItem","button","ListItemText","primary","Loading","Backdrop","CircularProgress","redirect","Jumbotron","LandingPage","Verify","ProtectedRoute","path","render","MovieRatings","Stats","StatProperty","LoggedOutRoute","Login","CreateAccount","Profile","Explore","window","location","hostname","match","rootReducer","combineReducers","refreshedState","newRequests","indexOf","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0b3c8c98.chunk.js","sourcesContent":["interface IBasicMovieData {\n  Title: string,\n  Year: string,\n  imdbID: string,\n  Type: string,\n  Poster: string\n}\nexport interface IProcessedMovieData {\n  Title: string,\n  Poster: string,\n  imdbID: string\n}\n\n/**\n * Asynchronous function that returns a list of movies based on the given query string (uses the omdb api)\n * @param {string} title The title of the movie\n * @returns {IProcessedMovieData[]} A list of movies with titles similar to the query\n */\nexport const searchMovies = async (title: string): Promise<IProcessedMovieData[]>  => {\n  const results = await fetch(`/api/movies/omdb/${title}`);\n  if(results.status === 200) {\n    let data = await results.json(); \n    return data.results;\n  } else {\n    throw new Error(\"invalid search\");\n  }\n  \n}\n","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\ninterface ISnackbar {\n  error?: string;\n  success: string;\n  handleClose: () => void,\n  open: boolean;\n}\n\n/**\n * \n * @param props Component properties\n * @param {string} [props.error] An optional error message\n * @param {string} props.success The message to be displayed\n * @param {()=>void} props.handleClose function to close the snackbar\n * @param {boolean} props.open boolean that determines if the snackbar is open\n */\nconst SnackbarComponent = (props: ISnackbar) => {\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}\n      open={props.open}\n      autoHideDuration={6000}\n      onClose={props.handleClose}\n      message={props.error ? props.error : props.success}\n      action={\n        <React.Fragment>\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={props.handleClose}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nexport default SnackbarComponent;","import { Dispatch, AnyAction } from 'redux';\nimport { IMovieData } from './movies';\n\n// overload typing functions to enforce action types\nexport function typedAction<T extends string>(type: T): { type: T };\nexport function typedAction<T extends string, P extends any>(type: T, payload: P): { type: T, payload: P };\nexport function typedAction(type: string, payload?: any) {\n  return { type, payload }\n}\n\nexport interface IAvatar {\n  color: string, \n  tilemap: number[][]\n}\n\nexport interface IFriends {\n  avatar: IAvatar,\n  username: string,\n  movies: IMovieData[],\n  friends: string[],\n  favorite_movie: IMovieData,\n  reviews: string[],\n  date_registered: string[]\n  _id: string\n}\n\ntype UserState = {\n  username: string | null;\n  avatar: IAvatar | null,\n  reviews: string[] | null,\n  upvoted_reviews: {movie_id: string, reviews:[]} | null\n  friends: IFriends[],\n  friend_requests: IFriends[],\n  favorite_movie: IMovieData | null,\n  guest: boolean | null,\n  _id: string | null\n}\n\nconst initialState: UserState = { username: null, upvoted_reviews: null, avatar: null, reviews: null, friends: [], friend_requests: [], favorite_movie: null, guest: null, _id: null};\n\n// login actions\nexport const login = (data: UserState) => typedAction('user/LOGIN', data);\nconst allowGuest = () => typedAction('user/LOGIN_GUEST');\nexport const logout = () => typedAction('user/LOGOUT');\n\n// add friend action\nexport const addFriend = (data: IFriends) => typedAction('user/ADD_FRIEND', data);\n\n/**\n * Function that checks for a user on the current session via api call\n */\nexport const checkSessionLogin = () => {\n  console.log('logging in');\n  return async (dispatch: Dispatch<AnyAction>) => {\n    const response = await fetch(\"/api/user/checkSession\");\n    const data = await response.json();\n    if (data.username) {\n      dispatch(login(data));\n    } else {\n      dispatch(allowGuest());\n    }\n  }\n}\n\ntype UserAction = ReturnType<typeof login | typeof logout | typeof addFriend | typeof allowGuest>\n\nexport function userReducer(state = {...initialState}, action: UserAction): UserState {\n  switch (action.type) {\n    case \"user/LOGIN\":\n      return {... action.payload, guest:false}\n    case \"user/LOGOUT\":\n      const refreshedState = {...initialState}\n      refreshedState.guest = true;\n      return refreshedState;\n    case \"user/LOGIN_GUEST\":\n      state.guest = true;\n      return {...state}\n    case \"user/ADD_FRIEND\":\n      state.friends = state.friends.concat([action.payload]);\n      let newRequests = state.friend_requests ? [...state.friend_requests] : [];\n      const index = newRequests.indexOf(action.payload);\n      newRequests.splice(index, 1);\n      state.friend_requests = newRequests;\n      return {...state}\n    default:\n      return state;\n  }\n}","import { typedAction} from './user';\n\nexport interface IDict {\n  [key: string]: number;\n}\n\nexport type ISortedStat = {\n  key: string;\n  count: number;\n  color?: string\n}\n\nexport type IRatings = {\n  total: number,\n  others: ISortedStat[]\n}\n\ntype StatsState = {\n  genres: ISortedStat[] | null,\n  contentRatings: ISortedStat[] | null,\n  datesAdded: string[] | null,\n  releaseDates: string[] | null,\n  themes: ISortedStat[] | null,\n  ratings: IRatings | null,\n}\n\n\nconst initialState: StatsState = {\n  genres: null,\n  contentRatings: null,\n  datesAdded: null,\n  releaseDates: null,\n  themes: null,\n  ratings: null\n};\n\n// stat setters\nexport const setGenres = (genres: ISortedStat[]) => typedAction(\"stats/SET_GENRES\", genres);\nexport const setContentRatings = (contentRatings: ISortedStat[]) => typedAction(\"stats/SET_CONTENT_RATINGS\", contentRatings);\nexport const setDatesAdded = (datesAdded: string[]) => typedAction(\"stats/SET_DATES_ADDED\", datesAdded);\nexport const setReleaseDates = (releaseDates: string[]) => typedAction(\"stats/SET_RELEASE_DATES\", releaseDates);\nexport const setThemes = (themes: ISortedStat[]) => typedAction(\"stats/SET_THEMES\", themes);\nexport const setRatings = (ratings: IRatings) => typedAction(\"stats/SET_RATINGS\", ratings);\nexport const clearStore = () => typedAction(\"stats/CLEAR_STORE\");\n\ntype StatsAction = ReturnType<\n  typeof setGenres |\n  typeof setContentRatings |\n  typeof setDatesAdded |\n  typeof setReleaseDates |\n  typeof setThemes |\n  typeof setRatings | \n  typeof clearStore\n>\n\nexport function statsReducer(state = {...initialState}, action: StatsAction): StatsState {\n  switch (action.type) {\n    case \"stats/SET_GENRES\":\n      state.genres = action.payload;\n      return { ...state }\n    case \"stats/SET_CONTENT_RATINGS\":\n      state.contentRatings = action.payload;\n      return { ...state }\n    case \"stats/SET_DATES_ADDED\":\n      state.datesAdded = action.payload;\n      return { ...state }\n    case \"stats/SET_RELEASE_DATES\":\n      state.releaseDates = action.payload;\n      return { ...state }\n    case \"stats/SET_THEMES\":\n      state.themes = action.payload;\n      return { ...state }\n    case \"stats/SET_RATINGS\":\n      state.ratings = action.payload;\n      return { ...state }\n    case \"stats/CLEAR_STORE\":\n      return {...initialState};\n    default:\n      return state;\n  }\n}","import { typedAction } from './user';\nimport { Dispatch, AnyAction } from 'redux';\nimport { clearStore } from \"./stats\";\n\ninterface IDateAdded {\n  date: string,\n  _id: string,\n  user_id: string\n}\n\nexport interface IReview {\n  review: string,\n  user_id: string,\n  username: string,\n  date_added: string,\n  upvotes: number,\n  upvoted_by: string[],\n  _id: string\n}\n\nexport interface IMovieData {\n  [key: string]: any,\n  title: string,\n  year: string,\n  genres: string[],\n  director: string[],\n  writer: string[],\n  rated: string,\n  plot: string,\n  themes: string[],\n  date_added: IDateAdded,\n  runtime: string,\n  poster: string,\n  entertainment_rating: number,\n  plot_rating: number,\n  style_rating: number,\n  bias_rating: number,\n  total_rating: number,\n  reviews: IReview[],\n  _id: string\n}\n\nexport interface IAverageMovieData {\n  title: string,\n  year: string,\n  genres: string[],\n  director: string[],\n  writer: string[],\n  rated: string,\n  plot: string,\n  runtime: string,\n  poster: string,\n  entertainment_rating_average: number,\n  plot_rating_average: number,\n  style_rating_average: number,\n  bias_rating_average: number,\n  total_rating_average: number,\n  ratings_length: number\n  _id: string\n}\n\ntype MovieState = {\n  movies: IMovieData[] | null,\n  topMoviesByPopularity: IAverageMovieData[] | null,\n  topMoviesByTotal: IAverageMovieData[] | null,\n  topMoviesByEntertainment: IAverageMovieData[] | null,\n  topMoviesByPlot: IAverageMovieData[] | null,\n  topMoviesByStyle: IAverageMovieData[] | null,\n  topMoviesByBias: IAverageMovieData[] | null,\n  filter: string,\n  search: string,\n  searchResults: IAverageMovieData[]\n}\n\nconst initialState: MovieState = {\n  movies: null,\n  topMoviesByPopularity: null,\n  topMoviesByEntertainment: null,\n  topMoviesByBias: null,\n  topMoviesByPlot: null,\n  topMoviesByStyle: null,\n  topMoviesByTotal: null,\n  filter: \"popularity\",\n  search: '',\n  searchResults: []\n};\n\nexport type IFilter = \"popularity\" | \"total\" | \"entertainment\" | \"plot\" | \"style\" | \"bias\";\n\n// search setters\nexport const setSearch = (search: string) => typedAction(\"movies/SET_SEARCH\", search);\nconst setSearchResults = (results: IAverageMovieData[]) => typedAction(\"movies/SET_SEARCH_RESULTS\", results)\n\n/**\n * Function that finds movies with titles similar to the provided query via api call.\n * @param {string} query The desired movie title\n */\nexport const searchMovies = (query: string) => async (dispatch: Dispatch<AnyAction>) => {\n  dispatch(setSearch(query));\n  if (query) {\n    const response = await fetch(`/api/movies/search/${query}`);\n    switch (response.status) {\n      case 200:\n        const movies = await response.json();\n        return dispatch(setSearchResults(movies));\n      default:\n        console.error('error searching for movies');\n        return dispatch(setSearchResults([]));\n    }\n  } else {\n    dispatch(setSearchResults([]));\n  }\n\n}\n\n// top movies and filter setters\nconst setTopMoviesAction = (filter: string, movies: IAverageMovieData[]) => typedAction('movies/SET_TOP_MOVIES', { filter, movies });\nexport const setFilter = (filter: string) => typedAction('movies/SET_FILTER', filter);\n\n/**\n * Function that fetches the top movies of the given criteria via api call\n * @param {string} filter criteria by which to sort movies\n */\nconst getTopMovies = async (filter: string) => {\n  const response = await fetch(`/api/movies/getTopMovies/${filter}`);\n  switch (response.status) {\n    case 200:\n      return await response.json();\n    default:\n      console.error('error fetching top movies');\n  }\n}\n\n/**\n  * Function that maps filters to search actions.\n  * @param {string} filter criteria by which to sort movies\n  */\nexport const setTopMovies = (filter: string) => async (dispatch: Dispatch<AnyAction>) => {\n  try {\n    if (!filter) {\n      filter = \"popularity\";\n    }\n    const movies: IAverageMovieData[] = await getTopMovies(filter);\n    dispatch(setTopMoviesAction(filter, movies));\n  } catch (err) {\n    console.error(err);\n  }\n}\n\n// movie setter\nexport const setMovies = (movies: IMovieData[] | null) => typedAction('movies/SET_MOVIES', movies);\n\n/**\n * Function that loads the current user's movies via api call\n */\nexport const loadMovies = () => {\n  return async (dispatch: Dispatch<AnyAction>) => {\n    dispatch(clearStore());\n    dispatch(setMovies(null));\n    const response = await fetch(\"/api/movies\");\n    switch (response.status) {\n      case 200:\n        const data = await response.json();\n        dispatch(setMovies(data));\n        break;\n      case 401:\n        // somehow logged out of the server\n        console.log('logout');\n        break;\n      default:\n        console.log('error fetching movies');\n    }\n  }\n}\n\ntype MovieAction = ReturnType<typeof setMovies | typeof setTopMoviesAction | typeof setFilter | typeof setSearch | typeof setSearchResults>\n\nexport function movieReducer(state = initialState, action: MovieAction): MovieState {\n  switch (action.type) {\n    case 'movies/SET_SEARCH':\n      state.search = action.payload;\n      return { ...state };\n    case 'movies/SET_SEARCH_RESULTS':\n      state.searchResults = action.payload;\n      return { ...state };\n    case 'movies/SET_MOVIES':\n      return action.payload ? Object.assign({ movies: action.payload.sort((a: IMovieData, b: IMovieData) => a.title > b.title ? 1 : -1) }) : { movies: null }\n    case 'movies/SET_TOP_MOVIES':\n      switch (action.payload.filter) {\n        case \"popularity\":\n          state.topMoviesByPopularity = action.payload.movies;\n          break;\n        case \"entertainment\":\n          state.topMoviesByEntertainment = action.payload.movies;\n          break;\n        case \"plot\":\n          state.topMoviesByPlot = action.payload.movies;\n          break;\n        case \"style\":\n          state.topMoviesByStyle = action.payload.movies;\n          break;\n        case \"bias\":\n          state.topMoviesByBias = action.payload.movies;\n          break;\n        case \"total\":\n          state.topMoviesByTotal = action.payload.movies;\n          break;\n      }\n      return { ...state };\n    case 'movies/SET_FILTER':\n      state.filter = action.payload;\n      return { ...state };\n    default:\n      return state;\n  }\n}","import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Snackbar from \"./Snackbar\";\n\nimport { RootState } from \"../redux\";\nimport { loadMovies, IMovieData } from \"../redux/modules/movies\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport { NavLink } from \"react-router-dom\";\n\nconst mapStateToProps = (state: RootState) => ({\n  movies: state.movies.movies,\n  username: state.user.username,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ loadMovies }, dispatch);\n\ntype ICopyMovieDispatch = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\ninterface ICopyMovie extends ICopyMovieDispatch {\n  movie: IMovieData;\n  closeDrawer: () => void;\n}\n\n/**\n * Component for adding movies that already exist in the database\n * @param {ICopyMovie} props component properties taken from redux store\n * @param {IMovieData} props.movie Movie data to be copied\n * @param {()=>void} props.closeDrawer function that closes the add movie drawer\n */\nconst UnconnectedCopyMovie = (props: ICopyMovie) => {\n  const [entertainment, setEntertainment] = React.useState<string>(\"\");\n  const [plot, setPlot] = React.useState<string>(\"\");\n  const [style, setStyle] = React.useState<string>(\"\");\n  const [bias, setBias] = React.useState<string>(\"\");\n  const [dateViewed, setDateViewed] = React.useState<Date | null>(new Date());\n  const [themes, setThemes] = React.useState<string[]>([]);\n  const [error, setError] = React.useState<string>(\"\");\n  const [open, setOpen] = React.useState<boolean>(false);\n\n  if (!props.username) {\n    return (\n      <div className=\"rate-movie\">\n        <img\n          src={props.movie.poster}\n          alt={props.movie.title}\n          className=\"poster\"\n        />\n        <h2>{props.movie.title}</h2>\n        <p className=\"grey italics\">\n          <NavLink to=\"/login\" className=\"link green\">\n            Login\n          </NavLink>{\" \"}\n          or{\" \"}\n          <NavLink to=\"/createAccount\" className=\"link green\">\n            create an account\n          </NavLink>{\" \"}\n          to add this movie.\n        </p>\n      </div>\n    );\n  }\n\n  /* ===== onChange handlers ===== */\n  const handleEntertainmentChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setEntertainment(rating <= 5 ? e.target.value : entertainment);\n    } else {\n      setEntertainment(\"\");\n    }\n  };\n\n  const handlePlotChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setPlot(rating <= 5 ? e.target.value : plot);\n    } else {\n      setPlot(\"\");\n    }\n  };\n\n  const handleStyleChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setStyle(rating <= 5 ? e.target.value : style);\n    } else {\n      setStyle(\"\");\n    }\n  };\n\n  const handleBiasChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setBias(rating <= 5 ? e.target.value : bias);\n    } else {\n      setBias(\"\");\n    }\n  };\n\n  const handleThemeChange = (index: number, e: any): void => {\n    const updatedThemes = [...themes];\n    updatedThemes[index] = e.target.value;\n    setThemes(updatedThemes);\n  };\n\n  const handleThemeDelete = (index: number): void => {\n    const updatedThemes = [...themes];\n    updatedThemes.splice(index, 1);\n    setThemes(updatedThemes);\n  };\n\n  const addNewTheme = (e: any): void => {\n    setThemes((prev) => [...prev, \"\"]);\n  };\n\n  /**\n   * Function that handles the form submission\n   * @param {any} e The form element\n   * @returns {void} void\n   */\n  const handleSubmit = async (e: any): Promise<void> => {\n    e.preventDefault();\n\n    // api request to add movie that already exists to the users account\n    const response = await fetch(\"/api/movies/addExistingMovie\", {\n      method: \"post\",\n      body: JSON.stringify({\n        id: props.movie._id,\n        entertainment_rating: parseInt(entertainment) || 0,\n        plot_rating: parseInt(plot) || 0,\n        style_rating: parseInt(style) || 0,\n        bias_rating: parseInt(bias) || 0,\n        themes,\n        date: dateViewed,\n        movie: props.movie,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    switch (response.status) {\n      case 200:\n        console.log(\"success\");\n        props.loadMovies();\n        props.closeDrawer();\n        break;\n      default:\n        setError(\"Unable to add movie. Try again later.\");\n        setOpen(true);\n        console.error(\"error saving movie\");\n    }\n  };\n\n  /* ===== rating data to be mapped to rating drawer */\n  const ratingData = [\n    {\n      title: \"Entertainment\",\n      changeHandler: handleEntertainmentChange,\n      value: entertainment,\n    },\n    {\n      title: \"Writing\",\n      changeHandler: handlePlotChange,\n      value: plot,\n    },\n    {\n      title: \"Style\",\n      changeHandler: handleStyleChange,\n      value: style,\n    },\n    {\n      title: \"Bias\",\n      changeHandler: handleBiasChange,\n      value: bias,\n    },\n  ];\n\n  return (\n    <div className=\"rate-movie\">\n      <img\n        src={props.movie.poster}\n        alt={props.movie.title}\n        className=\"poster\"\n      />\n      <h2>{props.movie.title}</h2>\n      <form autoComplete=\"off\" onSubmit={handleSubmit}>\n        {ratingData.map((rating, i) => (\n          <div key={rating.title} className=\"row margin-top\">\n            <label id={`${rating.title}Label`} className=\"green col text-right\">\n              {rating.title}:\n            </label>\n            <div className=\"col text-left\">\n              <input\n                type=\"string\"\n                className=\"small-input\"\n                aria-labelledby={`${rating.title}Label`}\n                value={rating.value}\n                onChange={rating.changeHandler}\n              />{\" \"}\n              <span className=\"grey\">/ 5</span>\n            </div>\n          </div>\n        ))}\n        {themes.map((theme, i) => (\n          <div key={`theme-${i}`} className=\"fade-in\">\n            <input\n              type=\"string\"\n              placeholder=\"theme\"\n              className=\"margin-top\"\n              value={theme}\n              onChange={(e) => handleThemeChange(i, e)}\n            />\n            <button\n              className=\"button-escape margin-top\"\n              aria-label=\"delete theme\"\n              onClick={() => handleThemeDelete(i)}\n            >\n              &times;\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          className=\"button-submit margin-top\"\n          onClick={addNewTheme}\n        >\n          + Add Theme\n        </button>\n        <div className=\"text-centered margin-top\">\n          <label id=\"datePickerLabel\" className=\"green text-right\">\n            Date Viewed:{\" \"}\n          </label>\n          <DatePicker\n            selected={dateViewed}\n            onChange={(date) => setDateViewed(date)}\n          />\n        </div>\n        <div className=\"inline-flex full-width row-reverse margin-top\">\n          <button type=\"submit\" className=\"button-submit\">\n            Submit\n          </button>\n          <button\n            onClick={props.closeDrawer}\n            type=\"button\"\n            className=\"button-cancel margin-right\"\n          >\n            Cancel\n          </button>\n        </div>\n        <div className=\"vertical-padding\"></div>\n      </form>\n      <Snackbar\n        error={error}\n        success=\"Movie added.\"\n        handleClose={() => setOpen(false)}\n        open={open}\n      />\n    </div>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedCopyMovie);\n","import React from \"react\";\nimport { IProcessedMovieData } from \"../util/api\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { RootState } from \"../redux\";\nimport { loadMovies } from \"../redux/modules/movies\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\n\nconst mapStateToProps = (state: RootState) => ({\n  movies: state.movies.movies,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ loadMovies }, dispatch);\n\ntype IRateMovieDispatch = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\ninterface IRateMovie extends IRateMovieDispatch {\n  movie: IProcessedMovieData;\n  closeDrawer: () => void;\n}\n\n/**\n * \n * @param props movies taken from movie redux store\n * @param {IProcessedMovieData} props.movie movie data returned from api server after search\n * @param {()=>void} props.closeDrawer function to close the add movie drawer\n */\nconst UnconnectedRateMovie = (props: IRateMovie) => {\n  const [entertainment, setEntertainment] = React.useState<string>(\"\");\n  const [plot, setPlot] = React.useState<string>(\"\");\n  const [style, setStyle] = React.useState<string>(\"\");\n  const [bias, setBias] = React.useState<string>(\"\");\n  const [dateViewed, setDateViewed] = React.useState<Date | null>(new Date());\n  const [themes, setThemes] = React.useState<string[]>([]);\n\n  /* ===== onChange handlers ===== */\n  const handleEntertainmentChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setEntertainment(rating <= 5 ? e.target.value : entertainment);\n    } else {\n      setEntertainment(\"\");\n    }\n  };\n\n  const handlePlotChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setPlot(rating <= 5 ? e.target.value : plot);\n    } else {\n      setPlot(\"\");\n    }\n  };\n\n  const handleStyleChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setStyle(rating <= 5 ? e.target.value : style);\n    } else {\n      setStyle(\"\");\n    }\n  };\n\n  const handleBiasChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setBias(rating <= 5 ? e.target.value : bias);\n    } else {\n      setBias(\"\");\n    }\n  };\n\n  const handleThemeChange = (index: number, e: any): void => {\n    const updatedThemes = [...themes];\n    updatedThemes[index] = e.target.value;\n    setThemes(updatedThemes);\n  };\n\n  const handleThemeDelete = (index: number): void => {\n    const updatedThemes = [...themes];\n    updatedThemes.splice(index, 1);\n    setThemes(updatedThemes);\n  };\n\n  const addNewTheme = (e: any): void => {\n    setThemes((prev) => [...prev, \"\"]);\n  };\n\n  /**\n   * Function that handles the form submission\n   * @param {any} e The form element\n   * @returns {void} void\n   * @todo Send form data to the server\n   */\n  const handleSubmit = async (e: any): Promise<void> => {\n    e.preventDefault();\n\n    console.log(\"submitted\");\n    const response = await fetch(\"/api/movies\", {\n      method: \"post\",\n      body: JSON.stringify({\n        imdbid: props.movie.imdbID,\n        entertainment_rating: parseInt(entertainment) || 0,\n        plot_rating: parseInt(plot) || 0,\n        style_rating: parseInt(style) || 0,\n        bias_rating: parseInt(bias) || 0,\n        themes,\n        date: dateViewed,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    switch (response.status) {\n      case 200:\n        console.log(\"movie successfully added\");\n        props.closeDrawer();\n\n        props.loadMovies();\n        break;\n      case 400:\n        console.log(\"movie already seen\");\n        break;\n      default:\n        console.log(\"unknown error\");\n    }\n  };\n\n  /* ===== rating data to be mapped to rating drawer */\n  const ratingData = [\n    {\n      title: \"Entertainment\",\n      changeHandler: handleEntertainmentChange,\n      value: entertainment,\n    },\n    {\n      title: \"Writing\",\n      changeHandler: handlePlotChange,\n      value: plot,\n    },\n    {\n      title: \"Style\",\n      changeHandler: handleStyleChange,\n      value: style,\n    },\n    {\n      title: \"Bias\",\n      changeHandler: handleBiasChange,\n      value: bias,\n    },\n  ];\n\n  return (\n    <div className=\"rate-movie\">\n      <img\n        src={props.movie.Poster}\n        alt={props.movie.Title}\n        className=\"poster\"\n      />\n      <h2>{props.movie.Title}</h2>\n      <form autoComplete=\"off\" onSubmit={handleSubmit} id=\"rate-movie-form\">\n        {ratingData.map((rating, i) => (\n          <div key={rating.title} className=\"row margin-top\">\n            <label id={`${rating.title}Label`} className=\"green col text-right\">\n              {rating.title}:\n            </label>\n            <div className=\"col text-left\">\n              <input\n                type=\"string\"\n                className=\"small-input\"\n                aria-labelledby={`${rating.title}Label`}\n                value={rating.value}\n                onChange={rating.changeHandler}\n              />{\" \"}\n              <span className=\"grey\">/ 5</span>\n            </div>\n          </div>\n        ))}\n        {themes.map((theme, i) => (\n          <div key={`theme-${i}`} className=\"fade-in\">\n            <input\n              type=\"string\"\n              placeholder=\"theme\"\n              className=\"margin-top\"\n              value={theme}\n              onChange={(e) => handleThemeChange(i, e)}\n            />\n            <button\n              className=\"button-escape margin-top\"\n              aria-label=\"delete theme\"\n              onClick={() => handleThemeDelete(i)}\n            >\n              &times;\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          className=\"button-submit margin-top\"\n          onClick={addNewTheme}\n        >\n          + Add Theme\n        </button>\n        <div className=\"text-centered margin-top\">\n          <label id=\"datePickerLabel\" className=\"green text-right\">\n            Date Viewed:{\" \"}\n          </label>\n          <DatePicker\n            selected={dateViewed}\n            onChange={(date) => setDateViewed(date)}\n          />\n        </div>\n        <div className=\"inline-flex full-width row-reverse margin-top\">\n          <button type=\"submit\" className=\"button-submit\">\n            Submit\n          </button>\n          <button\n            onClick={props.closeDrawer}\n            type=\"button\"\n            className=\"button-cancel margin-right\"\n          >\n            Cancel\n          </button>\n        </div>\n        <div className=\"vertical-padding\"></div>\n      </form>\n    </div>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedRateMovie);\n","import React from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { searchMovies, IProcessedMovieData } from \"../util/api\";\nimport \"../Styles/Poster.css\";\nimport { IMovieData } from \"../redux/modules/movies\";\nimport CopyMovie from \"./CopyMovie\";\nimport RateMovie from \"./RateMovie\";\n\ninterface IAddMovieModal {\n  closeDrawer: () => void;\n  propMovie?: IMovieData | null;\n}\n\n/**\n * Container for the add movie drawer.\n * @param {IAddMovieModal} props Component properties\n * @param {()=>void} props.closeDrawer Function that closes the drawer component\n * @param {IMovieData | null} [props.propMovie] Optional movie passed to the modal. If it is passed, the drawer will copy the movie data.\n */\nconst AddMovieModal = (props: IAddMovieModal) => {\n  const [search, setSearch] = React.useState<string>(\"\");\n  const [movies, setMovies] = React.useState<IProcessedMovieData[]>([]);\n  const [\n    selectedMovie,\n    setSelectedMovie,\n  ] = React.useState<IProcessedMovieData | null>(null);\n\n  // Search for a movie\n  const handleSubmit = async (e: any): Promise<void> => {\n    e.preventDefault();\n    try {\n      if (search) {\n        // make an api call to the server to fetch movies with similar titles\n        const searchData = await searchMovies(search);\n        setMovies(searchData);\n        setSelectedMovie(null);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleSearchChange = (e: any): void => {\n    setSearch(e.target.value);\n  };\n\n  const handlePosterClick = (movie: IProcessedMovieData): void => {\n    setSelectedMovie(movie);\n  };\n\n  if(props.propMovie) {\n    return (\n      <div className=\"drawer-content\">\n        <div className=\"drawer-header\">\n          <h2 id=\"movieSearchLabel\">Add Movie</h2>\n        </div>\n        <div className=\"drawer-body text-centered\">\n          <CopyMovie movie={props.propMovie} closeDrawer={props.closeDrawer} />\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"drawer-content\">\n      <div className=\"drawer-header\">\n        <h2 id=\"movieSearchLabel\">Add Movie</h2>\n      </div>\n      <div className=\"drawer-body\">\n        <form autoComplete=\"off\" onSubmit={handleSubmit}>\n          <div className=\"inline-flex full-width\">\n            <SearchIcon />\n            <input\n              type=\"text\"\n              aria-labelledby=\"movieSearchLabel\"\n              placeholder=\"Search\"\n              className=\"full-width\"\n              id=\"searchInput\"\n              value={search}\n              onChange={handleSearchChange}\n            />\n          </div>\n          <div className=\"inline-flex full-width row-reverse margin-top\">\n            <button type=\"submit\" className=\"button-submit\">\n              Search\n            </button>\n            <button\n              onClick={props.closeDrawer}\n              type=\"button\"\n              className=\"button-cancel margin-right\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n        <div className=\"vertical-padding\"></div>\n        {selectedMovie ? (\n          <div className=\"text-centered\">\n            <RateMovie movie={selectedMovie} closeDrawer={props.closeDrawer} />\n          </div>\n        ) : (\n          <div className=\"grid text-centered\">\n            {movies.map((movie) => (\n              <img\n                className=\"half-col hover-scale\"\n                src={movie.Poster}\n                alt={movie.Title}\n                onClick={() => handlePosterClick(movie)}\n                key={`search-poster-${movie.Title}`}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddMovieModal;\n","import React from \"react\";\nimport { NavLink, useLocation } from \"react-router-dom\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport TheatersIcon from \"@material-ui/icons/Theaters\";\nimport ExploreIcon from \"@material-ui/icons/Explore\";\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\n\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AddMovieDrawer from \"./AddMovieDrawer\";\nimport \"../Styles/Header.css\";\nimport \"../Styles/Drawer.css\";\nimport \"../Styles/DrawerPhone.css\";\n\nimport { MobileView, BrowserView } from \"react-device-detect\";\n\nimport { RootState } from \"../redux\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username,\n  friend_requests: state.user.friend_requests,\n});\n\ntype IHeader = ReturnType<typeof mapStateToProps>;\n\n/**\n * Header navigation component\n * @param {string} username The current user's username (taken from redux store)\n * @param {IFriends[]} friend_requests An array of users who have sent the current user friend requests\n */\nconst UnconnectedHeader: React.FC<IHeader> = ({\n  username,\n  friend_requests,\n}) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const openDrawer = (): void => {\n    setOpen(true);\n  };\n\n  const closeDrawer = (): void => {\n    setOpen(false);\n  };\n\n  const landing = useLocation().pathname === \"/\";\n\n  const loggedInHeader = (\n    <>\n      <NavLink to=\"/movies\" className=\"header-link\" activeClassName=\"active\">\n        MOVIES\n      </NavLink>\n      <NavLink to=\"/stats\" className=\"header-link\" activeClassName=\"active\">\n        STATS\n      </NavLink>\n      <NavLink to=\"/explore\" className=\"header-link\" activeClassName=\"active\">\n        EXPLORE\n      </NavLink>\n      <NavLink to=\"/profile\" className=\"header-link\" activeClassName=\"active\">\n        PROFILE\n      </NavLink>\n      {friend_requests.length > 0 && (\n        <span className=\"alert\">{friend_requests.length}</span>\n      )}\n      <Tooltip title=\"Add Movie\" aria-label=\"add_movie\" id=\"add_movie\">\n        <button\n          className={\n            landing\n              ? \"header-link header-button-landing\"\n              : \"header-link header-button\"\n          }\n          aria-labelledby=\"add_movie\"\n          onClick={openDrawer}\n        >\n          +\n        </button>\n      </Tooltip>\n    </>\n  );\n\n  const loggedOutHeader = (\n    <>\n      <NavLink to=\"/explore\" className=\"header-link\" activeClassName=\"active\">\n        EXPLORE\n      </NavLink>\n      <NavLink to=\"/login\" className=\"header-link\" activeClassName=\"active\">\n        LOGIN\n      </NavLink>\n    </>\n  );\n\n  const mobileLoggedOutHeader = [\n    <MenuItem className=\"nav-item\" key=\"explore-link\">\n      <NavLink onClick={handleClose} to=\"/explore\" className=\"nav-link\">\n        <ExploreIcon className=\"landing-icon pink\" /> Explore\n      </NavLink>\n    </MenuItem>,\n    <MenuItem className=\"nav-item\" key=\"login-link\">\n      <NavLink onClick={handleClose} to=\"/login\" className=\"nav-link\">\n        <AccountCircleIcon className=\"landing-icon pink\" /> Login\n      </NavLink>\n    </MenuItem>,\n  ];\n\n  const mobileLoggedInHeader = [\n    <MenuItem className=\"nav-item\" key=\"movie-link\">\n      <NavLink onClick={handleClose} to=\"/movies\" className=\"nav-link\">\n        <TheatersIcon className=\"landing-icon pink\" /> Movies\n      </NavLink>\n    </MenuItem>,\n    <MenuItem className=\"nav-item\" key=\"explore-link\">\n      <NavLink onClick={handleClose} to=\"/explore\" className=\"nav-link\">\n        <ExploreIcon className=\"landing-icon pink\" /> Explore\n      </NavLink>\n    </MenuItem>,\n    <MenuItem className=\"nav-item\" key=\"stats-link\">\n      <NavLink onClick={handleClose} to=\"/stats\" className=\"nav-link\">\n        <BarChartIcon className=\"landing-icon pink\" /> Stats\n      </NavLink>\n    </MenuItem>,\n    <MenuItem className=\"nav-item\" key=\"profile-link\">\n      <NavLink onClick={handleClose} to=\"/profile\" className=\"nav-link\">\n        <AccountCircleIcon className=\"landing-icon pink\" /> Profile\n      </NavLink>\n    </MenuItem>,\n  ];\n\n  return (\n    <nav>\n      <AppBar position=\"static\">\n        <Toolbar className={landing ? \"navbar-landing\" : \"navbar\"}>\n          <h1 id=\"logo\">INTAKE</h1>\n\n          <BrowserView>\n            <NavLink\n              exact\n              to=\"/\"\n              className=\"header-link\"\n              activeClassName=\"active\"\n            >\n              ABOUT\n            </NavLink>\n            {username ? loggedInHeader : loggedOutHeader}\n          </BrowserView>\n          <MobileView>\n            {username && (\n              <button\n                className={\n                  landing\n                    ? \"header-link header-button-landing\"\n                    : \"header-link header-button\"\n                }\n                aria-labelledby=\"add_movie\"\n                onClick={openDrawer}\n              >\n                +\n              </button>\n            )}\n\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"see navigation menu\"\n              aria-controls=\"phone-menu\"\n              aria-haspopup=\"true\"\n              onClick={(e) => setAnchorEl(e.currentTarget)}\n            >\n              <MenuIcon fontSize=\"large\" />\n            </IconButton>\n            <Menu\n              id=\"phone-menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n            >\n              <MenuItem className=\"nav-item\">\n                <NavLink onClick={handleClose} to=\"/\" className=\"nav-link\">\n                  <InfoIcon className=\"landing-icon pink\" /> About\n                </NavLink>\n              </MenuItem>\n              {username ? mobileLoggedInHeader : mobileLoggedOutHeader}\n            </Menu>\n          </MobileView>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className=\"drawer\"\n        open={open}\n        anchor=\"right\"\n        onClose={closeDrawer}\n      >\n        <AddMovieDrawer closeDrawer={closeDrawer} />\n      </Drawer>\n    </nav>\n  );\n};\n\nexport default connect(mapStateToProps)(UnconnectedHeader);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../Styles/Movies.css\";\nimport \"../Styles/MoviesPhone.css\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AddMovieDrawer from \"./AddMovieDrawer\";\nimport LazyLoad from \"react-lazyload\";\nimport MetaTags from \"react-meta-tags\";\n\nimport { RootState } from \"../redux\";\nimport { loadMovies, IMovieData } from \"../redux/modules/movies\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport { isMobile, isBrowser } from \"react-device-detect\";\n\nconst mapStateToProps = (state: RootState) => ({\n  movies: state.movies.movies,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ loadMovies }, dispatch);\n\ntype IMovies = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\n/**\n * Component that renders the user's movies in a CSS grid\n * @param props Pulls the user's movie from the redux store\n */\nconst UnconnectedMovies = (props: IMovies) => {\n  const [movies, setMovies] = React.useState<IMovieData[]>([]);\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [filter, setFilter] = React.useState<string>(\"Title\");\n\n  // Whenever the filter is changed, re-sort the movie array\n  React.useEffect(() => {\n    if (props.movies) {\n      switch (filter) {\n        case \"Date Viewed\":\n          setMovies(\n            [...props.movies].sort((a, b) => {\n              const aDate = new Date(a.date_added.date).getTime();\n              const bDate = new Date(b.date_added.date).getTime();\n              return bDate > aDate\n                ? -1\n                : bDate === aDate\n                ? b.title > a.title\n                  ? -1\n                  : 1\n                : 1;\n            })\n          );\n          break;\n        case \"Rating\":\n          setMovies(\n            [...props.movies].sort((a, b) =>\n              b.total_rating > a.total_rating\n                ? 1\n                : b.total_rating === a.total_rating\n                ? b.title > a.title\n                  ? -1\n                  : 1\n                : -1\n            )\n          );\n          break;\n        case \"Title\":\n          setMovies(\n            [...props.movies].sort((a, b) => (a.title > b.title ? 1 : -1))\n          );\n          break;\n      }\n    }\n  }, [filter]);\n\n  const closeDrawer = () => setOpen(false);\n\n  // JSX component for users with no movies\n  const noMovies = (\n    <div className=\"Movies margin-top noMovies\">\n      <button\n        type=\"button\"\n        id=\"big-add-button\"\n        aria-labelledby=\"big-add-button-label\"\n        className=\"margin-top\"\n        onClick={() => setOpen(true)}\n      >\n        +\n      </button>\n      <h1\n        id=\"big-add-button-label\"\n        className=\"text-centered margin-top\"\n        aria-label=\"Add Movie\"\n      >\n        Add Movie\n      </h1>\n      <Drawer\n        className=\"drawer\"\n        open={open}\n        anchor=\"right\"\n        onClose={closeDrawer}\n      >\n        <AddMovieDrawer closeDrawer={closeDrawer} />\n      </Drawer>\n    </div>\n  );\n\n  // JSX component for users with movies added\n  const hasMovies = (\n    <div className=\"Movies-main margin-top\">\n      <MetaTags>\n        <title>Your movies | INTAKE</title>\n        <meta\n          name=\"description\"\n          content=\"See all of the movies you've entered into your Intake. Sort them by their rating, the date you watched them, or their title. Click a movie for more information.\"\n        />\n      </MetaTags>\n      {isMobile && <h1 id=\"all-movies\">All Movies</h1>}\n      <form onSubmit={(e) => e.preventDefault()} id=\"movie-select\">\n        <select\n          aria-label=\"select filter\"\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n          className=\"float-right margin-top\"\n        >\n          <option value=\"Title\">Title</option>\n          <option value=\"Date Viewed\">Date Viewed</option>\n          <option value=\"Rating\">Rating</option>\n        </select>\n      </form>\n      {isBrowser && <h1 id=\"all-movies\">All Movies</h1>}\n      \n      <div className=\"posters-container\">\n        {movies &&\n          movies.map((movie) => (\n            <div className=\"poster-wrapper\" key={movie._id}>\n              <LazyLoad height={500 / 1.75} offset={200} once key={movie.title}>\n                <Link to={`/movies/${movie._id}`}>\n                  <img\n                    src={\n                      movie.poster.substring(0, movie.poster.length - 7) +\n                      \"300.jpg\"\n                    }\n                    className=\"poster-medium hover-scale\"\n                    alt={movie.title}\n                    aria-label={`${movie.title} | ${movie.total_rating}/20`}\n                  />\n                  <div className=\"hoverText\">\n                    <p>\n                      {movie.total_rating} <br></br>{\" \"}\n                      <span className=\"overlined\">20</span>\n                    </p>\n                  </div>\n                </Link>\n              </LazyLoad>\n              {isMobile && <p>{movie.total_rating} / 20</p>}\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n\n  return props.movies && props.movies.length > 0 ? hasMovies : noMovies;\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnconnectedMovies);\n","import React from \"react\";\nimport { ResponsivePie, PieDatum } from \"@nivo/pie\";\nimport \"../../Styles/Stats.css\";\nimport { formatPieData, colors} from \"../Stats\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ISortedStat } from \"../../redux/modules/stats\";\n\ninterface IPie {\n  data: ISortedStat[];\n  title: string;\n  titleExtension?: string\n}\n\n/**\n * Pie chart component (using Nivo ResponsivePie)\n * @param props {IPie} component props:\n * @param {ISortedStat[]} props.data sorted property data\n * @param {string} props.title page title\n * @param {string} [props.titleExtension] page title extension for displaying average rating\n */\nconst Pie = (props: IPie) => {\n  const [stats, setStats] = React.useState<PieDatum[]>([]);\n  const [count, setCount] = React.useState<number>(5);\n  const [color] = React.useState<string[]>(\n    colors[Math.floor(Math.random() * colors.length)]\n  );\n\n  const muiTheme = createMuiTheme({\n    overrides: {\n      MuiSlider: {\n        thumb: {\n          color: \"white\",\n        },\n        track: {\n          color: \"#EF4AB5\",\n        },\n        rail: {\n          color: \"#000\",\n          opacity: 1\n        },\n        valueLabel: {\n          color: '#171e22'\n        },\n        mark: {\n          opacity: 0,\n        },\n        markActive: {\n          opacity: 0\n        }\n      },\n    },\n  });\n\n  // get the top x values whenever new data is passed or x (count) is changed\n  React.useEffect(() => {\n    const topX = [...props.data].splice(0, count);\n    let topXTotal = topX.map((e) => e.count);\n    let total = 0;\n    if (topXTotal.length > 0) total = topXTotal.reduce((sum, e) => sum + e);\n    const others = [...props.data].splice(count, props.data.length);\n    if(others.length > 0) {\n      const othersCount = others.map((e) => e.count);\n      const othersTotal = othersCount.reduce((sum, e) => sum + e);\n      setStats(formatPieData(topX.concat([{key: \"Others\", count: othersTotal, color: \"#79858b\"}]), total+othersTotal, color));\n    } else {\n      setStats(formatPieData([...props.data].splice(0, count), total, color));\n    }\n\n  }, [props.data, count]);\n\n  const handleTooltip = (data: any) => {\n    return (\n      <p className=\"tooltip inline-flex\">\n        <span\n          className=\"color-indicator\"\n          style={{ backgroundColor: data.color }}\n        ></span>\n        {data.label}: {data.value} ({data.percentage}%)\n      </p>\n    );\n  };\n\n  const valueText = (value: number) => {\n    return `${value} ${props.title.toLowerCase()}`;\n  };\n\n  let lastVal: number = 5;\n  const handleSliderChange = (val: number) => {\n    if(val != lastVal){\n      setCount(val);\n      lastVal = val;\n    } \n  }\n\n  const getColor = (e:any) => {\n    return e.color;\n  }\n\n  return (\n    <div className=\"graph-container margin-top\">\n      <h2>{props.titleExtension ? props.title+props.titleExtension : props.title}</h2>\n      {props.title !== \"Average Rating\" && (\n        <ThemeProvider theme={muiTheme}>\n          <Slider\n            defaultValue={5}\n            getAriaValueText={valueText}\n            aria-label=\"number of values to show\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={0}\n            max={props.data.length}\n            className=\"slider\"\n            style={{width: '150px'}}\n            value={count}\n            onChange={(e, val) => handleSliderChange(val as number)}\n          />\n        </ThemeProvider>\n      )}\n      <ResponsivePie\n        data={stats}\n        margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\n        innerRadius={0.25}\n        padAngle={4}\n        cornerRadius={2}\n        colors={getColor}\n        radialLabelsSkipAngle={0}\n        radialLabelsTextXOffset={6}\n        radialLabelsTextColor=\"#eee\"\n        radialLabelsLinkOffset={0}\n        radialLabelsLinkDiagonalLength={14}\n        radialLabelsLinkHorizontalLength={18}\n        radialLabelsLinkStrokeWidth={1}\n        radialLabelsLinkColor={{ from: \"color\" }}\n        slicesLabelsSkipAngle={10}\n        slicesLabelsTextColor=\"#000\"\n        tooltip={handleTooltip}\n      />\n    </div>\n  );\n};\n\nexport default Pie;\n","import React from \"react\";\nimport { ResponsiveLine, Serie } from \"@nivo/line\";\nimport { ResponsiveCalendar } from \"@nivo/calendar\";\nimport moment from \"moment\";\n\ninterface IViewingTimeline {\n  dates: string[];\n}\n\ninterface IGroup {\n  [key: string]: { [key: string]: string[] };\n}\n\n/**\n * A function that organizes dates by month\n * @param {string[]} arr An array of date strings\n */\nconst organizeDates = (arr: string[]): IGroup => {\n  /* \n    {\n      year:\n        month: \n          [\n            dates\n          ]  \n    }\n    */\n  const group: IGroup = {};\n  arr.forEach((date) => {\n    const realDate = moment(date);\n    const year = realDate.year();\n    const month = realDate.format(\"MMM\");\n    if (!group[year]) group[year] = {};\n\n    group[year][month]\n      ? group[year][month].push(date)\n      : (group[year][month] = [date]);\n  });\n  return group;\n};\n\nconst months = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\ninterface ICalendar {\n  day: string;\n  value: number;\n}\n\n/**\n * Viewing timeline component for statistics page\n * @param {IViewingTimeline} props Component properties\n * @param {string[]} props.dates An array of the dates the user viewed the specified movies.\n * @returns JSX component containing Nivo Line Chart and Nivo Calendar\n */\nconst ViewingTimeline = (props: IViewingTimeline) => {\n  const [startDate, setStartDate] = React.useState<Date | null>(null);\n  const [endDate, setEndDate] = React.useState<string>(\n    moment(Date.now()).format(\"YYYY MMM\")\n  );\n  const [lineData, setLineData] = React.useState<Serie[]>([]);\n  const [calendarData, setCalendarData] = React.useState<ICalendar[]>([]);\n\n  React.useEffect(() => {\n    const organizedDates: IGroup = organizeDates(props.dates);\n    // loop through months in the given year\n    // if the current month is not found on the object, set it to 0\n    const data: Serie = {\n      id: \"test\",\n      color: \"#fff\",\n      data: [],\n    };\n    for (let m of months) {\n      organizedDates[\"2020\"] && organizedDates[\"2020\"][m]\n        ? data.data.push({ x: m, y: organizedDates[\"2020\"][m].length })\n        : data.data.push({ x: m, y: 0 });\n    }\n    setLineData([data]);\n\n    const dayDict: { [key: string]: ICalendar } = {};\n    props.dates.forEach((date) => {\n      const formattedDate = moment(date).format(\"YYYY-MM-DD\");\n      dayDict[formattedDate]\n        ? dayDict[formattedDate].value++\n        : (dayDict[formattedDate] = { day: formattedDate, value: 1 });\n    });\n    const calendarDates: ICalendar[] = [];\n    for (let date in dayDict) {\n      calendarDates.push(dayDict[date]);\n    }\n    setCalendarData(calendarDates);\n  }, [props.dates, startDate, endDate]);\n\n  const theme = {\n    grid: {\n      line: {\n        stroke: \"#000\",\n      },\n    },\n    axis: {\n      legend: {\n        text: {\n          fill: \"#EF4AB5\",\n          fontSize: 16,\n        },\n        color: \"#eee\",\n        itemTextColor: \"#eee\",\n        fill: \"#eee\",\n      },\n      ticks: {\n        text: {\n          fill: \"#eee\",\n          fontSize: 12,\n        },\n        line: {\n          stroke: \"#eee\",\n          strokeWidth: 1,\n        },\n        textColor: \"#eee\",\n        itemTextColor: \"#eee\",\n      },\n      domain: {\n        line: {\n          stroke: \"#eee\",\n          strokeWidth: 1,\n        },\n      },\n    },\n    crosshair: {\n      line: {\n        stroke: \"#eee\",\n        strokeWidth: 1,\n        strokeOpacity: 0.33,\n      },\n    },\n  };\n\n  const handleCalendarTooltip = (data: any) => (\n    <p className=\"tooltip inline-flex\">\n      <span\n        className=\"color-indicator\"\n        style={{ backgroundColor: data.color }}\n      ></span>\n      {moment(data.data.day).format(\"MMM DD, YYYY\")}: {data.value} movie{data.value !== 1 && \"s\"} seen\n    </p>\n  );\n\n  const handleTimelineTooltip = (data: any) => (\n    <p className=\"tooltip-line inline-flex\">\n      <span\n        className=\"color-indicator\"\n        style={{ backgroundColor: data.point.borderColor }}\n      ></span>\n      {data.point.data.x} : {data.point.data.y} movie\n      {data.point.data.y !== 1 && \"s\"} seen\n    </p>\n  );\n\n  return (\n    <div className=\"viewing-container\">\n      <div className=\"graph-container-large margin-top\">\n        <h2>Viewing Timeline</h2>\n        <ResponsiveLine\n          data={lineData}\n          margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n          tooltip={handleTimelineTooltip}\n          xScale={{ type: \"point\" }}\n          yScale={{\n            type: \"linear\",\n            min: \"auto\",\n            max: \"auto\",\n            stacked: true,\n            reverse: false,\n          }}\n          curve=\"monotoneX\"\n          axisTop={null}\n          axisRight={null}\n          theme={theme}\n          axisBottom={{\n            orient: \"bottom\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: \"Month\",\n            legendOffset: 36,\n            legendPosition: \"middle\",\n          }}\n          axisLeft={{\n            orient: \"left\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            tickValues: 5,\n            legend: \"Movies\",\n            legendOffset: -40,\n            legendPosition: \"middle\",\n          }}\n          colors={() => \"#EF4AB5\"}\n          lineWidth={3}\n          pointSize={5}\n          pointColor={{ theme: \"background\" }}\n          pointBorderWidth={5}\n          pointBorderColor={{ from: \"serieColor\" }}\n          pointLabel=\"y\"\n          pointLabelYOffset={-15}\n          areaOpacity={0}\n          useMesh={true}\n          enableGridX={false}\n          enableGridY={false}\n        />\n      </div>\n      <div\n        className=\"graph-container-large margin-top-xx\"\n        id=\"calendar-container\"\n      >\n        <ResponsiveCalendar\n          data={calendarData}\n          from=\"2020-02-01\"\n          to=\"2020-08-01\"\n          emptyColor=\"#171e22\"\n          colors={[\"#F2BF6C\", \"#F69A97\", \"#FB76C1\", \"#EF4AB5\"]}\n          margin={{ top: 50, right: 40, bottom: 40, left: 40 }}\n          yearSpacing={40}\n          monthBorderColor=\"#1E262A\"\n          dayBorderWidth={2}\n          dayBorderColor=\"#1E262A\"\n          minValue={1}\n          maxValue={4}\n          legends={[\n            {\n              anchor: \"bottom-right\",\n              direction: \"row\",\n              translateY: 36,\n              itemCount: 4,\n              itemWidth: 42,\n              itemHeight: 36,\n              itemsSpacing: 14,\n              itemDirection: \"right-to-left\",\n              textColor: \"#eee\",\n              itemTextColor: \"#eee\",\n              symbolBorderColor: \"#eee\",\n            },\n          ]}\n          tooltip={handleCalendarTooltip}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ViewingTimeline;\n","import React from \"react\";\nimport { ResponsiveLine, Serie } from \"@nivo/line\";\n\ninterface IReleaseTimeline {\n  dates: string[];\n}\n\n/**\n * Line chart for movie release dates\n * @param {IReleaseTimeline} props Component props\n * @param {string[]} props.dates List of dates movies were released.\n */\nconst ReleaseTimeline = (props: IReleaseTimeline) => {\n  const [lineData, setLineData] = React.useState<Serie[]>([]);\n\n  // Whenever new dates are passed down to this component, map them to decades.\n  React.useEffect(() => {\n    if (props.dates.length > 0) {\n      const dateDict: { [key: string]: number } = {};\n      const earliest = parseInt(\n        props.dates.reduce((acc, e) => (e < acc ? e : acc))\n      );\n      const latest = new Date().getFullYear();\n      for (\n        let i = 0;\n        i <= Math.ceil(latest / 10) - Math.floor(earliest / 10);\n        i++\n      ) {\n        dateDict[(earliest + i * 10).toString().substring(0, 3)] = 0;\n      }\n      props.dates.forEach((date) => dateDict[date.substring(0, 3)]++);\n      const data: { x: string; y: number }[] = [];\n      for (let i in dateDict) {\n        data.push({ x: `${i}0s`, y: dateDict[i] });\n      }\n      setLineData([\n        {\n          id: \"releaseTimeline\",\n          color: \"#fff\",\n          data: data,\n        },\n      ]);\n    }\n  }, [props.dates]);\n  const theme = {\n    grid: {\n      line: {\n        stroke: \"#000\",\n      },\n    },\n    axis: {\n      legend: {\n        text: {\n          fill: \"#96ddc2\",\n          fontSize: 16,\n        },\n      },\n      ticks: {\n        text: {\n          fill: \"#eee\",\n          fontSize: 12,\n        },\n        line: {\n          stroke: \"#eee\",\n          strokeWidth: 1,\n        },\n      },\n      domain: {\n        line: {\n          stroke: \"#eee\",\n          strokeWidth: 1,\n        },\n      },\n    },\n    crosshair: {\n      line: {\n        stroke: \"#eee\",\n        strokeWidth: 1,\n        strokeOpacity: 0.33,\n      },\n    },\n  };\n\n  const handleTooltip = (data: any) => (\n    <p className=\"tooltip-line inline-flex\">\n      <span\n        className=\"color-indicator\"\n        style={{ backgroundColor: data.point.borderColor }}\n      ></span>\n      {data.point.data.x} : {data.point.data.y} movie\n      {data.point.data.y !== 1 && \"s\"} seen\n    </p>\n  );\n\n  return (\n    <div className=\"graph-container-large margin-top\">\n      <h2>Release Timeline</h2>\n      <ResponsiveLine\n        data={lineData}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{ type: \"point\" }}\n        yScale={{\n          type: \"linear\",\n          min: \"auto\",\n          max: \"auto\",\n          stacked: true,\n          reverse: false,\n        }}\n        curve=\"monotoneX\"\n        axisTop={null}\n        axisRight={null}\n        theme={theme}\n        axisBottom={{\n          orient: \"bottom\",\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: \"decade\",\n          legendOffset: 36,\n          legendPosition: \"middle\",\n        }}\n        axisLeft={{\n          orient: \"left\",\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          tickValues: 5,\n          legend: \"movies\",\n          legendOffset: -40,\n          legendPosition: \"middle\",\n        }}\n        colors={() => \"#96ddc2\"}\n        lineWidth={3}\n        pointSize={5}\n        pointColor={{ theme: \"background\" }}\n        pointBorderWidth={5}\n        pointBorderColor={{ from: \"serieColor\" }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-15}\n        areaOpacity={0}\n        useMesh={true}\n        enableGridX={false}\n        enableGridY={false}\n        tooltip={handleTooltip}\n      />\n    </div>\n  );\n};\n\nexport default ReleaseTimeline;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\ninterface IBreadcrumbs {\n  crumbs: { name: string; href?: string }[];\n}\n\n/**\n * Component that renders breadcrumb links based on provided \"crumbs\"\n * @param {IBreadcrumbs} props Component properties\n * @param {{name: string, href?: string}[]} crumbs List of links, or \"crumbs\" to be rendered\n */\nconst Breadcrumbs = (props: IBreadcrumbs) => {\n  return (\n    <ul className=\"breadcrumbs\">\n      {props.crumbs.map((crumb) =>\n        crumb.href ? (\n          <React.Fragment key = {crumb.name}>\n            <li>\n              <NavLink to={crumb.href} className=\"crumb-link\">\n                {crumb.name}\n              </NavLink>\n            </li>\n            <li>/</li>\n          </React.Fragment>\n        ) : (\n          <li>\n            <p className=\"crumb\" key={crumb.name}>{crumb.name}</p>\n          </li>\n        )\n      )}\n    </ul>\n  );\n};\n\nexport default Breadcrumbs;\n","import React from \"react\";\nimport Pie from \"./Charts/Pie\";\nimport ViewingTimeline from \"./Charts/ViewingTimeline\";\nimport ReleaseTimeline from \"./Charts/ReleaseTimeline\";\nimport \"../Styles/Stats.css\";\nimport \"../Styles/StatsPhone.css\";\nimport { IMovieData } from \"../redux/modules/movies\";\nimport MetaTags from \"react-meta-tags\";\n\nimport { RootState } from \"../redux\";\nimport { loadMovies } from \"../redux/modules/movies\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport { useParams, NavLink } from \"react-router-dom\";\nimport { PieDatum } from \"@nivo/pie\";\nimport {\n  ISortedStat,\n  IDict,\n  setGenres,\n  setThemes,\n  setDatesAdded,\n  setReleaseDates,\n  setRatings,\n  setContentRatings,\n  IRatings,\n} from \"../redux/modules/stats\";\nimport Breadcrumbs from \"./Breadcrumbs\";\nimport { BrowserView } from \"react-device-detect\";\n\nexport const Green = [\"#E4FAF2\", \"#C4E3D8\", \"#A5CCBD\", \"#85B5A3\", \"#659E88\"];\nexport const Pink = [\"#FFDAF2\", \"#EEAED8\", \"#DD83BD\", \"#CC57A3\", \"#BB2B88\"];\n\n// color palettes for charts\nexport const colors = [\n  [\"#FCF2D5\", \"#F7CAC1\", \"#F2A2AD\", \"#ED7A99\", \"#E85285\"],\n  [\"#538DEC\", \"#70A8ED\", \"#8DC3EF\", \"#A9DEF0\", \"#C6F9F1\"],\n  [\"#EAFFF7\", \"#C8F3E5\", \"#A5E7D2\", \"#83DBC0\", \"#60CFAD\"],\n  [\"#F9E3F1\", \"#F6C0E3\", \"#F49ED6\", \"#F17BC8\", \"#EE58BA\"],\n  [\"#F6BD60\", \"#F7EDE2\", \"#F5CAC3\", \"#84A59D\", \"#F28482\"],\n  [\"#ff9f1c\", \"#ffbf69\", \"#ffffff\", \"#cbf3f0\", \"#2ec4b6\"],\n  [\"#d4e09b\", \"#f6f4d2\", \"#cbdfbd\", \"#f19c79\", \"#e6867a\"],\n  [\"#7bdff2\", \"#b2f7ef\", \"#eff7f6\", \"#f7d6e0\", \"#f2b5d4\"],\n];\n\n/**\n * \n * @param {ISortedStat[]} arr Array of values of the specified property\n * @param {number} total the sum of all the values of the specified property\n * @param colors array of colors\n */\nexport const formatPieData = (\n  arr: ISortedStat[],\n  total: number,\n  colors: string[]\n): PieDatum[] => {\n  return arr.map((value, i) => ({\n    id: value.key,\n    label: value.key,\n    value: value.count,\n    color: value.color ? value.color : colors[i % colors.length],\n    percentage: ((value.count / total) * 100).toLocaleString(\"fullwide\", {\n      maximumFractionDigits: 2,\n    }),\n  }));\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  movies: state.movies.movies,\n  genres: state.stats.genres,\n  contentRatings: state.stats.contentRatings,\n  datesAdded: state.stats.datesAdded,\n  releaseDates: state.stats.releaseDates,\n  themes: state.stats.themes,\n  ratings: state.stats.ratings,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      loadMovies,\n      setGenres,\n      setThemes,\n      setDatesAdded,\n      setReleaseDates,\n      setRatings,\n      setContentRatings,\n    },\n    dispatch\n  );\n\ntype IStats = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\ntype properties =\n  | \"title\"\n  | \"year\"\n  | \"genres\"\n  | \"director\"\n  | \"writer\"\n  | \"rated\"\n  | \"plot\"\n  | \"themes\"\n  | \"date_added\"\n  | \"runtime\"\n  | \"poster\"\n  | \"entertainment_rating\"\n  | \"plot_rating\"\n  | \"style_rating\"\n  | \"bias_rating\"\n  | \"total_rating\";\n\n/**\n * Function that sorts a dictionary of values \n * @param arr dictionary of values\n */\nconst sortStats = (arr: IDict): ISortedStat[] => {\n  let topFive = [];\n  for (let key in arr) {\n    topFive.push({ key, count: arr[key] });\n  }\n  topFive.sort((a, b) => b.count - a.count);\n  return topFive;\n};\n\nconst otherStats: string[] = [\n  \"Genres\",\n  \"Themes\",\n  \"Directors\",\n  \"Runtimes\",\n  \"Writers\",\n  \"Content Ratings\",\n];\n\nconst titleMapping: { [key: string]: string } = {\n  genres: \"Genres\",\n  themes: \"Themes\",\n  ratings: \"Ratings\",\n  director: \"Directors\",\n  writer: \"Writers\",\n  rated: \"Content Ratings\",\n  runtime: \"Runtimes\",\n  year: \"Years\"\n};\n\n/**\n * Statistic container component \n * @param props props taken from redux store\n */\nconst UnconnectedStats = (props: IStats) => {\n  const { property, value }: { property: properties; value: any } = useParams();\n\n  const [movieList, setMovieList] = React.useState<IMovieData[] | null>(null);\n  const [themes, setThemes] = React.useState<ISortedStat[]>([]);\n  const [ratings, setRatings] = React.useState<IRatings>({\n    total: 0,\n    others: [],\n  });\n  const [genres, setGenres] = React.useState<ISortedStat[]>([]);\n  const [contentRatings, setContentRatings] = React.useState<ISortedStat[]>([]);\n  const [datesAdded, setDatesAdded] = React.useState<string[]>([]);\n  const [releaseDates, setReleaseDates] = React.useState<string[]>([]);\n\n  // whenever the user's movies changes or the filter is changed, update the movie list\n  React.useEffect(() => {\n    if (props.movies) {\n      if (property && value) {\n        setMovieList(\n          props.movies.filter((movie) => {\n            const filter = movie[property];\n            return !Array.isArray(filter)\n              ? filter === value\n              : filter.includes(value);\n          })\n        );\n      } else {\n        setMovieList(props.movies);\n      }\n    }\n  }, [props.movies, value]);\n\n  /**\n   * Function that gathers movie statistics in hash maps.\n   */\n  const getStats = () => {\n    const themeDict: IDict = {};\n    let entertainment_average = 0;\n    let plot_average = 0;\n    let style_average = 0;\n    let bias_average = 0;\n    let total_average = 0;\n    let divisor = movieList?.length;\n    const dates: string[] = [];\n    const datesReleased: string[] = [];\n    const genreDict: IDict = {};\n    const contentRatingsDict: IDict = {};\n    movieList?.forEach((movie) => {\n      movie.themes.forEach((theme) =>\n        themeDict[theme] ? themeDict[theme]++ : (themeDict[theme] = 1)\n      );\n      movie.genres.forEach((genre) =>\n        genreDict[genre] ? genreDict[genre]++ : (genreDict[genre] = 1)\n      );\n      entertainment_average += movie.entertainment_rating;\n      plot_average += movie.plot_rating;\n      style_average += movie.style_rating;\n      bias_average += movie.bias_rating;\n      total_average += movie.total_rating;\n      contentRatingsDict[movie.rated]\n        ? contentRatingsDict[movie.rated]++\n        : (contentRatingsDict[movie.rated] = 1);\n      dates.push(movie.date_added.date);\n      datesReleased.push(movie.year);\n    });\n    const sortedThemes = sortStats(themeDict);\n    setThemes(sortedThemes);\n    if (divisor) {\n      entertainment_average = entertainment_average / divisor;\n      plot_average = plot_average / divisor;\n      style_average = style_average / divisor;\n      bias_average = bias_average / divisor;\n      total_average = total_average / divisor;\n    }\n    const averagedRatings: IRatings = {\n      total: Number(\n        total_average.toLocaleString(\"fullwide\", { maximumFractionDigits: 2 })\n      ),\n      others: [\n        {\n          key: \"Entertainment\",\n          count: Number(\n            entertainment_average.toLocaleString(\"fullwide\", {\n              maximumFractionDigits: 2,\n            })\n          ),\n        },\n        {\n          key: \"Writing\",\n          count: Number(\n            plot_average.toLocaleString(\"fullwide\", {\n              maximumFractionDigits: 2,\n            })\n          ),\n        },\n        {\n          key: \"Style\",\n          count: Number(\n            style_average.toLocaleString(\"fullwide\", {\n              maximumFractionDigits: 2,\n            })\n          ),\n        },\n        {\n          key: \"Bias\",\n          count: Number(\n            bias_average.toLocaleString(\"fullwide\", {\n              maximumFractionDigits: 2,\n            })\n          ),\n        },\n      ],\n    };\n    setRatings(averagedRatings);\n    const sortedGenres = sortStats(genreDict);\n    setGenres(sortedGenres);\n    const sortedContent = sortStats(contentRatingsDict);\n    setContentRatings(sortedContent);\n    setDatesAdded(dates);\n    setReleaseDates(datesReleased);\n    return {\n      genres: sortedGenres,\n      contentRatings: sortedContent,\n      datesAdded: dates,\n      releaseDates: datesReleased,\n      themes: sortedThemes,\n      ratings: averagedRatings,\n    };\n  };\n\n  // Set stat states when the movies are loaded (check redux stores for stored state);\n  React.useEffect(() => {\n    if (movieList) {\n      if (!property && !value) {\n        if (\n          !props.genres &&\n          !props.contentRatings &&\n          !props.datesAdded &&\n          !props.ratings &&\n          !props.releaseDates &&\n          !props.themes\n        ) {\n          const sortedValues = getStats();\n          props.setGenres(sortedValues.genres);\n          props.setDatesAdded(sortedValues.datesAdded);\n          props.setContentRatings(sortedValues.contentRatings);\n          props.setReleaseDates(sortedValues.releaseDates);\n          props.setThemes(sortedValues.themes);\n          props.setRatings(sortedValues.ratings);\n        } else {\n          setGenres(props.genres as ISortedStat[]);\n          setContentRatings(props.contentRatings as ISortedStat[]);\n          setDatesAdded(props.datesAdded as string[]);\n          setReleaseDates(props.releaseDates as string[]);\n          setThemes(props.themes as ISortedStat[]);\n          setRatings(props.ratings as IRatings);\n        } \n      } else {\n        getStats();\n      }\n    }\n  }, [movieList]);\n\n  const title = titleMapping[property];\n  const crumbs = [\n    {\n      name: \"Stats\",\n      href: \"/stats\",\n    },\n    {\n      name: title,\n      href: `/stats/${title}`,\n    },\n    {\n      name: value,\n    },\n  ];\n\n  return (\n    <div className=\"Stats text-centered margin-top\">\n      {property ? (\n        <MetaTags>\n          <title>Your personal {value} movie statistics | INTAKE</title>\n          <meta\n            name=\"description\"\n            content={`View statistics for all the movies you've seen with the ${titleMapping[\n              property\n            ].substring(\n              0,\n              titleMapping[property].length - 1\n            )} ${value}. See the average rating, the most common themes, genres, and content ratings, and content timelines.`}\n          />\n        </MetaTags>\n      ) : (\n        <MetaTags>\n          <title>Your personal movie statistics | INTAKE</title>\n          <meta\n            name=\"description\"\n            content={`View statistics for all the movies you've submitted to your Intake feed. See the average rating, the most common themes, genres, and content ratings, and content timelines.`}\n          />\n        </MetaTags>\n      )}\n      {property && <Breadcrumbs crumbs={crumbs} />}\n      <h1>\n        {property\n          ? `${title.substring(0, title.length - 1)}: ${value}`\n          : \"All Movies\"}\n      </h1>\n      {movieList?.length === 0 ? (\n        <p className=\"grey italics\">\n          You don't have any movies that can be used to collect these\n          statistics.{\" \"}\n          <NavLink to=\"/movies\" className=\"green link\">\n            Add More\n          </NavLink>\n        </p>\n      ) : (\n        <>\n          <p className=\"green italics\">Movies Seen: {movieList?.length}</p>\n          <div className=\"two-col-grid\">\n            <Pie data={themes} title=\"Themes\" />\n            <Pie\n              data={ratings.others}\n              title=\"Average Rating\"\n              titleExtension={`: ${ratings.total}`}\n            />\n            <Pie data={genres} title=\"Genres\" />\n            <Pie data={contentRatings} title=\"Content Ratings\" />\n          </div>\n          <BrowserView>\n            <ViewingTimeline dates={datesAdded} />\n            <div className=\"vertical-padding\"></div>\n            <ReleaseTimeline dates={releaseDates} />\n            <div className=\"vertical-padding\"></div>\n            <div className=\"vertical-padding\"></div>\n          </BrowserView>\n          {!property && (\n            <div className=\"margin-top\">\n              <h1>Other Stats</h1>\n              <div className=\"other-stats\">\n                {otherStats.map((title) => (\n                  <NavLink\n                    to={`/stats/${title}`}\n                    className=\"stat-link\"\n                    key={title}\n                  >\n                    <p>{title}</p>\n                  </NavLink>\n                ))}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnconnectedStats);\n","import React from \"react\";\nimport { IMovieData } from \"../redux/modules/movies\";\n\nimport { RootState } from \"../redux\";\nimport { loadMovies } from \"../redux/modules/movies\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\n\nconst mapStateToProps = (state: RootState) => ({\n  movies: state.movies.movies,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ loadMovies }, dispatch);\n\ntype IEditMovieDispatch = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\ninterface IEditMovie extends IEditMovieDispatch {\n  movie: IMovieData;\n  entertainment_rating: number;\n  plot_rating: number;\n  style_rating: number;\n  bias_rating: number;\n  themes: string[];\n  closeDrawer: () => void;\n  id: string;\n}\n\n/**\n * \n * @param {IEditMovie} props component properties taken from redux store.\n * @param {IMovieData} movie The movie to be edited\n * @param {number} entertainment_rating The movie's entertainment_rating\n * @param {number} plot_rating The movie's plot_rating\n * @param {number} style_rating The movie's style_rating\n * @param {number} bias_rating The movie's bias_rating\n * @param {string[]} themes The movie's themes\n * @param {()=>void} closeDrawer function to close edit movie drawer\n * @param {string} id The movie's id\n */\nconst UnconnectedEditMovie = (props: IEditMovie) => {\n  const [entertainment, setEntertainment] = React.useState<string>(\n    props.entertainment_rating.toString()\n  );\n  const [plot, setPlot] = React.useState<string>(props.plot_rating.toString());\n  const [style, setStyle] = React.useState<string>(\n    props.style_rating.toString()\n  );\n  const [bias, setBias] = React.useState<string>(props.bias_rating.toString());\n  const [themes, setThemes] = React.useState<string[]>(props.themes);\n\n  /* ===== onChange handlers ===== */\n  const handleEntertainmentChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setEntertainment(rating <= 5 ? e.target.value : entertainment);\n    } else {\n      setEntertainment(\"\");\n    }\n  };\n\n  const handlePlotChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setPlot(rating <= 5 ? e.target.value : plot);\n    } else {\n      setPlot(\"\");\n    }\n  };\n\n  const handleStyleChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setStyle(rating <= 5 ? e.target.value : style);\n    } else {\n      setStyle(\"\");\n    }\n  };\n\n  const handleBiasChange = (e: any): void => {\n    if (e.target.value) {\n      const rating = parseInt(e.target.value);\n      setBias(rating <= 5 ? e.target.value : bias);\n    } else {\n      setBias(\"\");\n    }\n  };\n\n  const handleThemeChange = (index: number, e: any): void => {\n    const updatedThemes = [...themes];\n    updatedThemes[index] = e.target.value;\n    setThemes(updatedThemes);\n  };\n\n  const handleThemeDelete = (index: number): void => {\n    const updatedThemes = [...themes];\n    updatedThemes.splice(index, 1);\n    setThemes(updatedThemes);\n  };\n\n  const addNewTheme = (e: any): void => {\n    setThemes((prev) => [...prev, \"\"]);\n  };\n\n  const ratingData = [\n    {\n      title: \"Entertainment\",\n      changeHandler: handleEntertainmentChange,\n      value: entertainment,\n    },\n    {\n      title: \"Writing\",\n      changeHandler: handlePlotChange,\n      value: plot,\n    },\n    {\n      title: \"Style\",\n      changeHandler: handleStyleChange,\n      value: style,\n    },\n    {\n      title: \"Bias\",\n      changeHandler: handleBiasChange,\n      value: bias,\n    },\n  ];\n\n  // submission handler that sends an api request to the server, saving the updated movie data\n  const handleSubmit = async (e: any): Promise<void> => {\n    e.preventDefault();\n    const response = await fetch(`/api/movies/${props.id}`, {\n      method: \"post\",\n      body: JSON.stringify({\n        id: props.id,\n        entertainment_rating: parseInt(entertainment),\n        plot_rating: parseInt(plot),\n        style_rating: parseInt(style),\n        bias_rating: parseInt(bias),\n        themes,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    switch (response.status) {\n      case 200:\n        props.loadMovies();\n        props.closeDrawer();\n        break;\n      case 401:\n        console.log(\"error saving\");\n        break;\n      default:\n        console.log(\"unkown error\");\n    }\n  };\n\n  return (\n    <div className=\"drawer-content\">\n      <div className=\"drawer-header\">\n        <h2 id=\"movieEditLabel\">Edit Ratings</h2>\n        <hr></hr>\n        <div className=\"vertical-padding\"></div>\n      </div>\n      <div className=\"drawer-body text-centered\">\n        <img\n          src={props.movie.poster}\n          alt={props.movie.title}\n          className=\"poster\"\n        />\n        <h2>{props.movie.title}</h2>\n        <form autoComplete=\"off\" onSubmit={handleSubmit}>\n          {ratingData.map((rating, i) => (\n            <div key={rating.title} className=\"row margin-top\">\n              <label\n                id={`${rating.title}Label`}\n                className=\"green col text-right\"\n              >\n                {rating.title}:\n              </label>\n              <div className=\"col text-left\">\n                <input\n                  type=\"string\"\n                  className=\"small-input\"\n                  aria-labelledby={`${rating.title}Label`}\n                  value={rating.value}\n                  onChange={rating.changeHandler}\n                />\n                {' '}\n                <span className=\"grey\">/ 5</span>\n              </div>\n            </div>\n          ))}\n          {themes.map((theme, i) => (\n            <div key={`theme-${i}`} className=\"fade-in\">\n              <input\n                type=\"string\"\n                placeholder=\"theme\"\n                className=\"margin-top\"\n                value={theme}\n                onChange={(e) => handleThemeChange(i, e)}\n              />\n              <button\n                className=\"button-escape margin-top\"\n                aria-label=\"delete theme\"\n                onClick={() => handleThemeDelete(i)}\n              >\n                &times;\n              </button>\n            </div>\n          ))}\n          <button\n            type=\"button\"\n            className=\"button-submit margin-top\"\n            onClick={addNewTheme}\n          >\n            + Add Theme\n          </button>\n          <div className=\"inline-flex full-width row-reverse margin-top\">\n            <button type=\"submit\" className=\"button-submit\">\n              Submit\n            </button>\n            <button\n              onClick={props.closeDrawer}\n              type=\"button\"\n              className=\"button-cancel margin-right\"\n            >\n              Cancel\n            </button>\n          </div>\n          <div className=\"vertical-padding\"></div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedEditMovie);\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport \"../Styles/Movies.css\";\n\nimport { RootState } from \"../redux\";\nimport { loadMovies } from \"../redux/modules/movies\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\n\nconst mapStateToProps = (state: RootState) => ({\n  movies: state.movies.movies,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ loadMovies }, dispatch);\n\ntype IDeleteMovieDispatch = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\ninterface IDeleteMovie extends IDeleteMovieDispatch {\n  open: boolean;\n  closeDialog: () => void;\n  id: string;\n}\n\n/**\n * Dialog popup component for deleting movies\n * @param {ICopyMovie} props component properties taken from redux store.\n * @param {boolean} props.open boolean value that opens and closes the dialog\n * @param {()=>void} props.closeDialog function that closes the delete movie dialog when called\n * @param {string} props.id the movie id\n */\nconst UnconnectedDeleteMovie = (props: IDeleteMovie) => {\n  /**\n   * Function to handle form submission and subsequent api request\n   */\n  const handleSubmit = async (): Promise<void> => {\n    // make api request\n    const response = await fetch(`/api/movies/${props.id}`, {\n      method: \"delete\",\n    });\n    switch (response.status) {\n      case 200:\n        props.loadMovies();\n        props.closeDialog();\n        break;\n      case 401:\n        console.log(\"error\");\n        break;\n      default:\n        console.log(\"unknown error\");\n    }\n  };\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.closeDialog}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n      className=\"dialog\"\n    >\n      <DialogTitle id=\"dialog-title\">{\"Delete Movie?\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"dialog-description\">\n          Deleting this movie from your Intake will result in all of your\n          inputted data (including ratings, themes, and reviews) being\n          permanently removed from our database.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <button onClick={props.closeDialog} className=\"button-cancel\">\n          Cancel\n        </button>\n        <button type=\"submit\" onClick={handleSubmit} className=\"button-submit\">\n          Delete\n        </button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedDeleteMovie);\n","import React from \"react\";\nimport { useParams, Redirect, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport \"../Styles/Movies.css\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport EditMovie from \"./EditMovie\";\nimport DeleteMovie from \"./DeleteMovie\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport MetaTags from \"react-meta-tags\";\n\nimport { RootState } from \"../redux\";\nimport { loadMovies, IReview } from \"../redux/modules/movies\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { isMobile } from \"react-device-detect\";\n\ninterface IDeleteReview {\n  open: boolean;\n  closeDialog: () => void;\n  handleSubmit: () => void;\n}\n\n// Delete Review dialog\nconst DeleteReview = (props: IDeleteReview) => {\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.closeDialog}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n      className=\"dialog\"\n    >\n      <DialogTitle id=\"dialog-title\">{\"Delete Review?\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"dialog-description\">\n          Deleting this review will result in it being permanently removed from\n          our servers.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <button onClick={props.closeDialog} className=\"button-cancel\">\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          onClick={props.handleSubmit}\n          className=\"button-submit\"\n        >\n          Delete\n        </button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  movies: state.movies.movies,\n  _id: state.user._id,\n  upvoted_reviews: state.user.upvoted_reviews,\n  username: state.user.username,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ loadMovies }, dispatch);\n\n\ntype IMovieRatings = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\n/**\n * Component that displays the user's rating for a given movie\n * @param props Component props taken from redux store\n */\nconst UnconnectedMovieRatings = (props: IMovieRatings) => {\n  const { id } = useParams();\n  const [showReviews, setShowReviews] = React.useState<boolean>(true);\n  const [newReview, setNewReview] = React.useState<string>(\"\");\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [drawerOpen, setDrawerOpen] = React.useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = React.useState<boolean>(false);\n  const [deleteReviewOpen, setDeleteReviewOpen] = React.useState<boolean>(\n    false\n  );\n  const [editing, setEditing] = React.useState<boolean>(false);\n  const [selectedReview, setSelectedReview] = React.useState<IReview | null>(\n    null\n  );\n\n  const movie = props.movies?.find((movie) => movie._id === id);\n\n  // if the user hasn't rated the movie, redirect them to the movies page\n  if (!movie) {\n    return <Redirect to=\"/movies\" />;\n  }\n\n  const entertainmentElements = new Array(5)\n    .fill(false)\n    .fill(true, 0, movie?.entertainment_rating);\n  const plotElements = new Array(5)\n    .fill(false)\n    .fill(true, 0, movie?.plot_rating);\n  const styleElements = new Array(5)\n    .fill(false)\n    .fill(true, 0, movie?.style_rating);\n  const biasElements = new Array(5)\n    .fill(false)\n    .fill(true, 0, movie?.bias_rating);\n\n  const ratingOrder = [\n    {\n      title: \"Entertainment\",\n      source: entertainmentElements,\n      value: movie.entertainment_rating,\n    },\n    {\n      title: \"Writing\",\n      source: plotElements,\n      value: movie.plot_rating,\n    },\n    {\n      title: \"Style\",\n      source: styleElements,\n      value: movie.style_rating,\n    },\n    {\n      title: \"Bias\",\n      source: biasElements,\n      value: movie.bias_rating,\n    },\n  ];\n\n  // submission handler that sends the written review to the api serve\n  const handleReviewSubmit = async (e: any): Promise<void> => {\n    e.preventDefault();\n    const response = await fetch(`/api/movies/${id}/review`, {\n      method: \"post\",\n      body: JSON.stringify({ review: newReview }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (response.status === 200) {\n      console.log(\"success\");\n      setShowReviews(true);\n\n      props.loadMovies();\n    } else {\n      console.log(\"failure\");\n    }\n  };\n  const tabListener = (e: any): void => {\n    if (e.keyCode === 9) {\n      e.preventDefault();\n      setNewReview((prev) => prev + \"    \");\n    }\n  };\n\n  // submission handler that sends an edited review to the api server\n  const handleReviewEdit = async (e: any): Promise<void> => {\n    e.preventDefault();\n    const response = await fetch(\n      `/api/movies/${id}/edit_review/${selectedReview?._id}`,\n      {\n        method: \"post\",\n        body: JSON.stringify({ review: newReview }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if (response.status === 200) {\n      setEditing(false);\n      setShowReviews(true);\n      props.loadMovies();\n    } else {\n      console.log(\"failure\");\n    }\n  };\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => setAnchorEl(null);\n\n  const handleEditClick = (): void => {\n    handleClose();\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteClick = (): void => {\n    handleClose();\n    setDialogOpen(true);\n  };\n\n  const closeDialog = () => setDialogOpen(false);\n\n  const closeDrawer = () => setDrawerOpen(false);\n\n  // sends an api call to the server, upvoting the given review\n  const upvoteReview = async (review: IReview, vote: 1 | -1) => {\n    const response = await fetch(`/api/movies/${id}/review/${review._id}`, {\n      method: \"post\",\n      body: JSON.stringify({ vote }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (response.status === 200) {\n      props.loadMovies();\n    } else {\n      console.log(\"error\");\n    }\n  };\n\n  const deleteReview = async (review: IReview) => {\n    const response = await fetch(`/api/movies/${id}/review/${review._id}`, {\n      method: \"delete\",\n    });\n    if (response.status === 200) props.loadMovies();\n    else console.log(\"error\");\n  };\n\n  const editReview = (review: IReview) => {\n    setNewReview(review.review);\n    setSelectedReview(review);\n    setShowReviews(false);\n    setEditing(true);\n  };\n\n  movie.reviews = movie.reviews.sort((a, b) => b.upvotes - a.upvotes);\n\n  return (\n    <div className=\"Movies\">\n      <MetaTags>\n        <title> Your ratings for {movie.title} | INTAKE</title>\n        <meta\n          name=\"description\"\n          content={`See your inputted ratings for ${movie.title} as well as who directed it, who wrote it, its genres, themes, and more. See other user's opinion of ${movie.title}, and write your own review.`}\n        />\n      </MetaTags>\n      <Tooltip title=\"Options\" aria-label=\"options\">\n        <button\n          type=\"button\"\n          id=\"options\"\n          className=\"float-right margin-top-xx button-icon\"\n          aria-controls=\"simple-menu\"\n          aria-haspopup=\"true\"\n          onClick={handleClick}\n        >\n          <SettingsIcon />\n        </button>\n      </Tooltip>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleEditClick}>Edit</MenuItem>\n        <MenuItem onClick={handleDeleteClick}>Delete</MenuItem>\n      </Menu>\n      <Drawer\n        className=\"drawer\"\n        open={drawerOpen}\n        anchor=\"right\"\n        onClose={closeDrawer}\n      >\n        <EditMovie\n          movie={movie}\n          entertainment_rating={movie.entertainment_rating}\n          plot_rating={movie.plot_rating}\n          style_rating={movie.style_rating}\n          bias_rating={movie.bias_rating}\n          themes={movie.themes}\n          closeDrawer={closeDrawer}\n          id={id}\n        />\n      </Drawer>\n      <DeleteMovie open={dialogOpen} closeDialog={closeDialog} id={id} />\n      <div className=\"vertical-padding\"></div>\n      <div className=\"row\">\n        <div className=\"poster-large-container\">\n          <img\n            src={movie.poster}\n            className=\"poster-large margin-top\"\n            alt={movie.title}\n          />\n        </div>\n        <div className={isMobile ? \"col\" : \"col margin-left-x\"}>\n          <h1 className={isMobile ? \"text-centered\" : \"\"}>{movie.title}</h1>\n          <div className=\"two-col-grid\">\n            <div className={isMobile ? \"feed-grid\" : \"two-col-grid\"}>\n              {ratingOrder.map((rating) => (\n                <React.Fragment key={rating.title}>\n                  <p className=\"green\">{rating.title}: </p>\n                  <div className=\"margin-top-x no-padding\">\n                    {rating.source.map((value: boolean, i) => (\n                      <div\n                        className={value ? \"rating-dot active\" : \"rating-dot\"}\n                        key={`${rating.title}_${i}`}\n                      ></div>\n                    ))}\n                  </div>\n                </React.Fragment>\n              ))}\n              <p className=\"green\">Total Rating: </p>\n              <p>{movie.total_rating}/20</p>\n              <p className=\"green\">Date Viewed:</p>\n              <p>{moment(movie.date_added.date).format(\"MM-DD-YYYY\")}</p>\n            </div>\n            <div className={isMobile ? \"feed-grid-one-col\" : \"\"}>\n              <p>\n                <span className=\"green\">Director: </span>\n                {movie.director.map((director, i) => (\n                  <Tooltip\n                    title={`See stats for director: ${director}`}\n                    aria-label={`Link to see stats for director: ${director}`}\n                    key={`${director}-director-link`}\n                  >\n                    <Link\n                      to={`/stats/director/${director}`}\n                      className=\"link white button-icon\"\n                    >\n                      {i === 0 ? director : `, ${director}`}\n                    </Link>\n                  </Tooltip>\n                ))}\n              </p>\n              <p>\n                <span className=\"green\">Writer: </span>\n                {movie.writer.map((writer, i) => (\n                  <Tooltip\n                    title={`See stats for writer: ${writer}`}\n                    aria-label={`Link to see stats for writer: ${writer}`}\n                    key={`${writer}-writer-link`}\n                  >\n                    <Link\n                      to={`/stats/writer/${writer}`}\n                      className=\"link white button-icon\"\n                    >\n                      {i === 0 ? writer : `, ${writer}`}\n                    </Link>\n                  </Tooltip>\n                ))}\n              </p>\n              <p>\n                <span className=\"green\">Genres: </span>\n                {movie.genres.map((genre, i) => (\n                  <Tooltip\n                    title={`See stats for genre: ${genre}`}\n                    aria-label={`Link to see stats for genre: ${genre}`}\n                    key={`${genre}-genre-link`}\n                  >\n                    <Link\n                      to={`/stats/genres/${genre}`}\n                      className=\"link white button-icon\"\n                    >\n                      {i === 0 ? genre : `, ${genre}`}\n                    </Link>\n                  </Tooltip>\n                ))}\n              </p>\n              <p>\n                <span className=\"green\">Year Released: </span>\n                <Tooltip\n                  title={`See stats for movies released in ${movie.year}`}\n                  aria-label={`See stats for movies released in ${movie.year}`}\n                >\n                  <Link\n                    to={`/stats/year/${movie.year}`}\n                    className=\"link white button-icon\"\n                  >\n                    {movie.year}\n                  </Link>\n                </Tooltip>\n              </p>\n              <p>\n                <span className=\"green\">Rated: </span>{\" \"}\n                <Tooltip\n                  title={`See stats for movies with a ${movie.rated} content rating.`}\n                  aria-label={`See stats for movies with a ${movie.rated} content rating.}`}\n                >\n                  <Link\n                    to={`/stats/rated/${movie.rated}`}\n                    className=\"link white\"\n                  >\n                    {movie.rated}\n                  </Link>\n                </Tooltip>\n              </p>\n              <p>\n                <span className=\"green\">Runtime: </span> {movie.runtime}\n              </p>\n              <p>\n                <span className=\"green\">Themes: </span>\n                {movie.themes.map((theme, i) => (\n                  <Tooltip\n                    title={`See stats for theme: ${theme}`}\n                    aria-label={`Link to see stats for theme: ${theme}`}\n                    key={`${theme}-theme-link`}\n                  >\n                    <Link\n                      to={`/stats/themes/${theme}`}\n                      className=\"link white button-icon\"\n                    >\n                      {i === 0 ? theme : `, ${theme}`}\n                    </Link>\n                  </Tooltip>\n                ))}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"vertical-padding border-bottom\"></div>\n      <div className=\"two-col-grid\">\n        <div>\n          <p className=\"green\">Premise: </p>\n          <p className=\"indented italics\">{movie.plot}</p>\n        </div>\n        <div className=\"border-left\">\n          <div className=\"margin-left margin-top\">\n            <h2 className=\"bold float-left no-margin-top\">Reviews</h2>\n            {showReviews ? (\n              <button\n                type=\"button\"\n                className=\"button-submit float-right\"\n                onClick={() => {\n                  setShowReviews(false);\n                  setEditing(false);\n                }}\n              >\n                Add a Review\n              </button>\n            ) : (\n              <form\n                autoComplete=\"off\"\n                onSubmit={editing ? handleReviewEdit : handleReviewSubmit}\n              >\n                <textarea\n                  className=\"full-width\"\n                  placeholder=\"Your review\"\n                  onKeyDown={tabListener}\n                  value={newReview}\n                  onChange={(e) => setNewReview(e.target.value)}\n                ></textarea>\n                <div className=\"inline-flex full-width row-reverse margin-top margin-left-s\">\n                  {editing ? (\n                    <button type=\"submit\" className=\"button-submit\">\n                      Edit Review\n                    </button>\n                  ) : (\n                    <button type=\"submit\" className=\"button-submit\">\n                      Submit Review\n                    </button>\n                  )}\n\n                  <button\n                    type=\"button\"\n                    className=\"button-cancel margin-right\"\n                    onClick={() => setShowReviews(true)}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            )}\n            <div className=\"vertical-padding\"></div>\n            <div className=\"review-container\">\n              {movie.reviews.map((review) => (\n                <div className=\"review\" key={review._id}>\n                  <p className=\"green\">\n                    {review.username}:{\" \"}\n                    {review.upvotes > 0 &&\n                    review.upvoted_by.includes(props._id as string) ? (\n                      <button\n                        className=\"button-upvote\"\n                        onClick={() => upvoteReview(review, -1)}\n                      >\n                        <ThumbUpIcon\n                          className=\"upvote-selected\"\n                          fontSize=\"small\"\n                        />\n                      </button>\n                    ) : (\n                      <button\n                        className=\"button-upvote\"\n                        onClick={() => upvoteReview(review, 1)}\n                      >\n                        <ThumbUpIcon className=\"upvote\" fontSize=\"small\" />\n                      </button>\n                    )}\n                    <span className=\"white margin-left\">{review.upvotes}</span>\n                    {review.username === props.username && (\n                      <span className=\"float-right inline-flex\">\n                        <Tooltip title=\"Edit Review\">\n                          <button\n                            className=\"button-review-icon\"\n                            onClick={() => editReview(review)}\n                          >\n                            <EditIcon fontSize=\"small\" />\n                          </button>\n                        </Tooltip>\n                        <Tooltip title=\"Delete Review\">\n                          <button\n                            className=\"button-review-icon\"\n                            onClick={() => setDeleteReviewOpen(true)}\n                          >\n                            <CloseIcon fontSize=\"small\" />\n                          </button>\n                        </Tooltip>\n                        <DeleteReview\n                          open={deleteReviewOpen}\n                          closeDialog={() => setDeleteReviewOpen(false)}\n                          handleSubmit={() => deleteReview(review)}\n                        />\n                      </span>\n                    )}\n                  </p>\n                  <p>{review.review}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"vertical-padding\"></div>\n    </div>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedMovieRatings);\n","import React from \"react\";\nimport { RootState } from \"../redux\";\nimport { login } from \"../redux/modules/user\";\nimport { loadMovies } from \"../redux/modules/movies\";\nimport { connect } from \"react-redux\";\nimport MetaTags from \"react-meta-tags\";\n\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n\nimport \"../Styles/Login.css\";\nimport \"../Styles/LoginPhone.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { Dispatch, bindActionCreators } from \"redux\";\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ login, loadMovies }, dispatch);\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\n/**\n * Component that renders a login form\n * @param props Component props taken from redux store\n */\nconst UnconnectedLogin: React.FC<Props> = (props: Props) => {\n  // state\n  const [showPassword, setShowPassword] = React.useState<boolean>(false);\n  const [username, setUsername] = React.useState<string>(\"\");\n  const [password, setPassword] = React.useState<string>(\"\");\n  const [error, setError] = React.useState<boolean>(false);\n  const [verify, setVerify] = React.useState<boolean>(false);\n\n  // Submission handler that sends an api request to verify login credentials\n  const handleSubmit = async (e: any): Promise<void> => {\n    e.preventDefault();\n    // check to see if the form has been filled out\n    if (username && password) {\n      // send api request with login info\n      const response = await fetch(\"/api/user/login\", {\n        method: \"post\",\n        body: JSON.stringify({ username, password }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      switch (response.status) {\n        case 200:\n          const data = await response.json();\n          props.login(data);\n          props.loadMovies();\n          break;\n        case 401:\n          // 401 status code may mean that the user has not verified their account yet\n          const hasError = await response.json();\n          if(hasError.error){\n            setVerify(true);\n          } else {\n            setError(true);\n          }\n          break;\n        default:\n          setError(true);\n      }\n    }\n  };\n\n  const handlePasswordChange = (e: any): void => {\n    setPassword(e.target.value);\n    setError(false);\n  };\n\n  const handleUsernameChange = (e: any): void => {\n    setUsername(e.target.value);\n    setError(false);\n  }\n\n  return (\n    <div className=\"Login text-centered margin-top\">\n      <MetaTags>\n        <title>Login to your Intake account | INTAKE</title>\n        <meta name=\"description\" content={`Enter your username/email and password to gain access to your Intake account or register for a new account for free.`} />\n      </MetaTags>\n      <h1>Login</h1>\n      <div className=\"vertical-padding\"></div>\n      <form onSubmit={handleSubmit} className=\"text-centered login-form\">\n        <div className=\"inline-flex\">\n          <AccountBoxIcon />\n          <input\n            type=\"text\"\n            placeholder=\"Username or email\"\n            className={error ? \"input-large-error margin-left\" : \"input-large margin-left\"}\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div className=\"margin-top\"></div>\n        <div className=\"inline-flex margin-top row-reverse\">\n          <input\n            aria-label=\"password\"\n            placeholder=\"Password\"\n            className={error ? \"input-large-error margin-left\" : \"input-large margin-left\"}\n            type={showPassword ? \"text\" : \"password\"}\n            value={password}\n            onChange={handlePasswordChange}\n          />\n          {showPassword ? (\n            <Tooltip title=\"Hide Password\">\n              <button\n                type=\"button\"\n                className=\"button-icon\"\n                aria-label=\"hide password\"\n                onClick={() => setShowPassword(false)}\n              >\n                <LockOpenIcon />\n              </button>\n            </Tooltip>\n          ) : (\n            <Tooltip title=\"Show Password\">\n              <button\n                type=\"button\"\n                className=\"button-icon\"\n                aria-label=\"hide password\"\n                onClick={() => setShowPassword(true)}\n              >\n                <LockIcon />\n              </button>\n            </Tooltip>\n          )}\n        </div>\n        {error && <p className=\"red\">Invalid username / password combination</p>}\n        {verify && <p className=\"red\">Please <NavLink to=\"/verify\" className=\"link green\">verify</NavLink> your Intake account.</p>}\n        <div className=\"full-width margin-top login-buttons\">\n          <button type=\"button\" className=\"button-icon margin-right\">\n            <NavLink to=\"/createAccount\" className=\"green link\">\n              Create an account\n            </NavLink>\n          </button>\n          <button\n            type=\"button\"\n            className=\"button-icon margin-right\"\n            aria-label=\"forgot password\"\n          >\n            <NavLink to=\"/resetPassword\" className=\"white link\">\n              Forgot Password\n            </NavLink>\n          </button>\n          <button type=\"submit\" className=\"button-submit\">\n            Login\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnconnectedLogin);\n","import React from \"react\";\nimport { RootState } from \"../redux\";\nimport { login } from \"../redux/modules/user\";\nimport { connect } from \"react-redux\";\nimport MetaTags from \"react-meta-tags\";\n\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport MailIcon from \"@material-ui/icons/Mail\";\n\nimport \"../Styles/Login.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username,\n});\n\nconst mapDispatchToProps = { login };\n\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\n/**\n * Create account component that returns a registration form\n * @param {Props} props component properties taken from redux store.\n */\nconst UnconnectedCreateAccount: React.FC<Props> = (props: Props) => {\n  // state\n  const [showPassword, setShowPassword] = React.useState<boolean>(false);\n  const [showComfirmPassword, setShowComfirmPassword] = React.useState<boolean>(\n    false\n  );\n  const [username, setUsername] = React.useState<string>(\"\");\n  const [email, setEmail] = React.useState<string>(\"\");\n  const [password, setPassword] = React.useState<string>(\"\");\n  const [comfirmPassword, setComfirmPassword] = React.useState<string>(\"\");\n  const [error, setError] = React.useState<string>(\"\");\n  const [verify, setVerify] = React.useState<boolean>(false);\n\n  /**\n   * Submission handler that makes an api request to check the validity of the account credentials\n   * @param e form element\n   */\n  const handleSubmit = async (e: any): Promise<void> => {\n    e.preventDefault();\n    if (password !== comfirmPassword) {\n      setError(\"Passwords don't match\");\n    } else {\n      if (username && password) {\n        const response = await fetch(\"/api/user/register\", {\n          method: \"post\",\n          body: JSON.stringify({ email, username, password }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n        // check the registration status\n        switch (response.status) {\n          case 200:\n            // if the user was successfully verified, send their inputted email a verification token\n            const verificationSent = await fetch(\n              \"/api/user/sendVerificationToken\",\n              {\n                method: \"post\",\n                body: JSON.stringify({ email }),\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n              }\n            )\n            if(verificationSent.status === 200){\n              setVerify(true);\n            } else {\n              setError(\"Verification token could not be sent. Try again later.\")\n            }\n            break;\n          default:\n            const error = await response.json();\n            setError(error.error);\n        }\n      } else {\n        setError(\"Please enter valid user data.\");\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    setError(\"\");\n  }, [username, email, password]);\n\n  const handlePasswordChange = (e: any): void => {\n    setPassword(e.target.value);\n  };\n\n  return (\n    <div className=\"Login text-centered margin-top\">\n      <MetaTags>\n        <title>Create a new account for free. | INTAKE</title>\n        <meta\n          name=\"description\"\n          content={`Sign up for a new Intake account with a valid email, username, and password. Once registered, you'll be able to start adding movies to your Intake feed.`}\n        />\n      </MetaTags>\n      <h1>Create Account</h1>\n      <div className=\"vertical-padding\"></div>\n      <form onSubmit={handleSubmit} className=\"text-centered login-form\">\n        <div className=\"inline-flex\">\n          <AccountBoxIcon />\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            className={\n              error\n                ? \"input-large-error margin-left\"\n                : \"input-large margin-left\"\n            }\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </div>\n        <div className=\"margin-top-x\"></div>\n        <div className=\"inline-flex\">\n          <MailIcon />\n          <input\n            type=\"text\"\n            placeholder=\"Email\"\n            className={\n              error\n                ? \"input-large-error margin-left\"\n                : \"input-large margin-left\"\n            }\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </div>\n        <div className=\"inline-flex margin-top-x row-reverse\">\n          <input\n            aria-label=\"password\"\n            placeholder=\"Password\"\n            className={\n              error\n                ? \"input-large-error margin-left\"\n                : \"input-large margin-left\"\n            }\n            type={showPassword ? \"text\" : \"password\"}\n            value={password}\n            onChange={handlePasswordChange}\n          />\n          {showPassword ? (\n            <Tooltip title=\"Hide Password\">\n              <button\n                type=\"button\"\n                className=\"button-icon\"\n                aria-label=\"hide password\"\n                onClick={() => setShowPassword(false)}\n              >\n                <LockOpenIcon />\n              </button>\n            </Tooltip>\n          ) : (\n            <Tooltip title=\"Show Password\">\n              <button\n                type=\"button\"\n                className=\"button-icon\"\n                aria-label=\"hide password\"\n                onClick={() => setShowPassword(true)}\n              >\n                <LockIcon />\n              </button>\n            </Tooltip>\n          )}\n        </div>\n        <div className=\"inline-flex margin-top-x row-reverse\">\n          <input\n            aria-label=\"password\"\n            placeholder=\"Comfirm Password\"\n            className={\n              error\n                ? \"input-large-error margin-left\"\n                : \"input-large margin-left\"\n            }\n            type={showComfirmPassword ? \"text\" : \"password\"}\n            value={comfirmPassword}\n            onChange={(e: any) => setComfirmPassword(e.target.value)}\n          />\n          {showComfirmPassword ? (\n            <Tooltip title=\"Hide Password\">\n              <button\n                type=\"button\"\n                className=\"button-icon\"\n                aria-label=\"hide password\"\n                onClick={() => setShowComfirmPassword(false)}\n              >\n                <LockOpenIcon />\n              </button>\n            </Tooltip>\n          ) : (\n            <Tooltip title=\"Show Password\">\n              <button\n                type=\"button\"\n                className=\"button-icon\"\n                aria-label=\"hide password\"\n                onClick={() => setShowComfirmPassword(true)}\n              >\n                <LockIcon />\n              </button>\n            </Tooltip>\n          )}\n        </div>\n        {error && <p className=\"red\">{error}</p>}\n        {verify && <p>A verification email has been sent to {email}.</p>}\n        <div className=\"full-width margin-top login-buttons\">\n          <button type=\"button\" className=\"button-icon margin-right-x\">\n            <NavLink to=\"/login\" className=\"green link\">\n              Back to login\n            </NavLink>\n          </button>\n          <span> </span>\n          <button type=\"submit\" className=\"button-submit float-right\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnconnectedCreateAccount);\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport \"../Styles/Movies.css\"\n\nimport { RootState } from \"../redux\";\nimport { logout } from \"../redux/modules/user\";\nimport {setMovies} from \"../redux/modules/movies\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username\n});\n\nconst mapDispatchToProps = {logout, setMovies}\n\ntype ILogoutDispatch = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\ninterface ILogout extends ILogoutDispatch {\n  open: boolean;\n  closeDialog: () => void;\n}\n\n/**\n * Dialog component that comfirms if a user would like to log out of their account\n * @param props Component properties taken from redux store and basic dialog props\n */\nconst UnconnectedLogout = (props: ILogout) => {\n\n  // submission handler that sends a logout request to the api server\n  const handleSubmit=async (): Promise<void>=>{\n    const response = await fetch(\"/api/user/logout\");\n    switch(response.status){\n      case 200:\n        props.closeDialog();\n        props.setMovies(null);\n        props.logout();\n        break;\n      default:\n        console.log('unknown error');\n    }\n  }\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.closeDialog}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n      className=\"dialog\"\n    >\n      <DialogTitle id=\"dialog-title\">{\"Log out of Intake?\"}</DialogTitle>\n      <DialogActions>\n        <button onClick={props.closeDialog} className=\"button-cancel\">\n          Cancel\n        </button>\n        <button type=\"submit\" onClick={handleSubmit} className=\"button-submit\">\n          Logout\n        </button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnconnectedLogout);\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport \"../Styles/Movies.css\"\n\nimport { RootState } from \"../redux\";\nimport { logout } from \"../redux/modules/user\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username\n});\n\nconst mapDispatchToProps = {logout}\n\ntype IDeleteAccountDispatch = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\ninterface IDeleteAccount extends IDeleteAccountDispatch {\n  open: boolean;\n  closeDialog: () => void;\n}\n\n/**\n * Dialog popup to confirm account deletion\n * @param {IDeleteAccount} props component properties taken from redux store.\n * @param {boolean} props.open boolean value that opens and closes the dialog\n * @param {()=>void} props.closeDialog function that closes the delete account dialog when called\n */\nconst UnconnectedDeleteAccount = (props: IDeleteAccount) => {\n\n  /**\n   * Function to handle form submission and subsequent api request\n   */\n  const handleSubmit=async (): Promise<void>=>{\n    // make api call\n    const response = await fetch(\"/api/user/delete\", {method:\"delete\"});\n    switch(response.status){\n      case 200:\n        props.closeDialog();\n        props.logout();\n        break;\n      default:\n        console.log('unknown error');\n    }\n  }\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.closeDialog}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n      className=\"dialog\"\n    >\n      <DialogTitle id=\"dialog-title\">{\"Delete your Intake account?\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"dialog-description\">\n          Deleting your account will result in all of your entered movie data being permanently deleted from our database.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <button onClick={props.closeDialog} className=\"button-cancel\">\n          Cancel\n        </button>\n        <button type=\"submit\" onClick={handleSubmit} className=\"button-submit\">\n          Delete Account\n        </button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnconnectedDeleteAccount);\n","import { typedAction, IFriends, IAvatar } from './user';\nimport { Dispatch, AnyAction } from 'redux';\nimport { IMovieData } from './movies';\n\ninterface IFeedEntry {\n  movie: IMovieData,\n  username: string,\n  user_id: string,\n  avatar: IAvatar\n}\n\ninterface ExploreState {\n  currentUser: IFriends | null;\n  filter: string;\n  search: string;\n  topUsersByMovies: IFriends[] | null;\n  topUsersByFriends: IFriends[] | null;\n  topUsersByReviews: IFriends[] | null;\n  topUsersByDateAddedOldest: IFriends[] | null;\n  topUsersByDateAddedNewest: IFriends[] | null;\n  searchResults: IFriends[],\n  feed: IFeedEntry[] | null\n}\n\ntype IFilter = \"movies\" | \"friends\" | \"reviews\" | \"date_added_oldest\" | \"date_added_newest\"\n\nconst initialState: ExploreState = {\n  filter: \"movies\",\n  search: \"\",\n  currentUser: null,\n  topUsersByFriends: null,\n  topUsersByMovies: null,\n  topUsersByReviews: null,\n  topUsersByDateAddedOldest: null,\n  topUsersByDateAddedNewest: null,\n  searchResults: [],\n  feed: null\n};\n\n// setter functions\nexport const setFilter = (filter: string) => typedAction('explore/SET_FILTER', filter);\nexport const setCurrentUser = (user: IFriends | null) => typedAction('explore/SET_USER', user);\nexport const setFeed = (feed: IFeedEntry[]) => typedAction('explore/SET_FEED', feed);\n\n\n/**\n * Function that loads a user's personalized feed via api call\n */\nexport const getFeed = () => async (dispatch: Dispatch<AnyAction>) => {\n  try {\n    const response = await fetch(\"/api/friends/feed\");\n    switch(response.status) {\n      case 200:\n        const data = await response.json();\n        return dispatch(setFeed(data));\n      default:\n        throw new Error('error fetching feed');\n    }\n  } catch(err) {\n    \n    console.error(err);\n  }\n} \n\n/**\n * Function that gets the top users of the given criteria via api call\n * @param {IFilter} filter The criteria in which to compare users\n */\nconst getTopUsers = async (filter: IFilter) => {\n  const response = await fetch(`/api/friends/getTopUsers/${filter}`);\n  switch (response.status) {\n    case 200:\n      const data = await response.json();\n      return data;\n    default:\n      throw new Error('error getting top users');\n  }\n}\n\n// top user setters\nexport const setTopUsersByMovies = (users: IFriends[]) => typedAction('explore/SET_TOP_USERS_BY_MOVIES', users);\nexport const setTopUsersByFriends = (users: IFriends[]) => typedAction('explore/SET_TOP_USERS_BY_FRIENDS', users);\nexport const setTopUsersByReviews = (users: IFriends[]) => typedAction('explore/SET_TOP_USERS_BY_REVIEWS', users);\nexport const setTopUsersByDateAddedOldest = (users: IFriends[]) => typedAction('explore/SET_TOP_USERS_BY_DATE_ADDED_OLDEST', users);\nexport const setTopUsersByDateAddedNewest = (users: IFriends[]) => typedAction('explore/SET_TOP_USERS_BY_DATE_ADDED_NEWEST', users);\n\nconst filterActions = {\n  \"movies\": setTopUsersByMovies,\n  \"friends\": setTopUsersByFriends,\n  \"reviews\": setTopUsersByReviews,\n  \"date_added_oldest\": setTopUsersByDateAddedOldest,\n  \"date_added_newest\": setTopUsersByDateAddedNewest,\n}\n\n/**\n * Function that sets the top users of the specified category\n * @param {IFilter} filter which top users array to set\n */\nexport const setTopUsers = (filter: IFilter) => async (dispatch: Dispatch<AnyAction>) => {\n  try {\n    const users: IFriends[] = await getTopUsers(filter);\n    dispatch(filterActions[filter](users));\n  } catch (err) {\n    // ***** IMPROVE ERROR HANDLING *****\n    console.error(err);\n  }\n}\n\n/**\n * Function that gets the requested user's public profile data via api call\n * @param {string} id user id\n */\nexport const loadProfile = (id: string) => {\n  return async (dispatch: Dispatch<AnyAction>) => {\n    dispatch(setCurrentUser(null));\n    const response = await fetch(`/api/friends/${id}`);\n    switch (response.status) {\n      case 200:\n        const data = await response.json();\n        dispatch(setCurrentUser(data));\n        break;\n      default:\n        console.log('error fetching profile');\n    }\n  }\n}\n\n// search setters\nconst setSearchKey = (search: string) => typedAction('explore/SET_SEARCH', search);\nconst setSearchResults = (users: IFriends[]) => typedAction('explore/SET_SEARCH_RESULTS', users);\n\n/**\n * Function that finds users with similar usernames to the search query via api call\n * @param {string} search username query\n */\nexport const setSearch = (search: string) => async (dispatch: Dispatch<AnyAction>) => {\n  dispatch(setSearchKey(search));\n  if (search) {\n    const response = await fetch(`/api/friends/search/${search}`);\n    switch (response.status) {\n      case 200:\n        const data = await response.json();\n        console.log(data);\n        dispatch(setSearchResults(data.users));\n        break;\n      default:\n        console.log(\"error\");\n    }\n  }\n\n}\n\n\ntype ExploreAction = ReturnType<typeof setCurrentUser |\n  typeof setTopUsersByMovies |\n  typeof setTopUsersByDateAddedOldest |\n  typeof setTopUsersByDateAddedNewest |\n  typeof setTopUsersByReviews |\n  typeof setTopUsersByFriends |\n  typeof setFilter |\n  typeof setSearchKey |\n  typeof setSearchResults |\n  typeof setFeed\n>\n\nexport function exploreReducer(state = initialState, action: ExploreAction): ExploreState {\n  switch (action.type) {\n    case \"explore/SET_USER\":\n      state.currentUser = action.payload;\n      return { ...state }\n    case \"explore/SET_TOP_USERS_BY_MOVIES\":\n      state.topUsersByMovies = action.payload;\n      return { ...state }\n    case \"explore/SET_TOP_USERS_BY_FRIENDS\":\n      state.topUsersByFriends = action.payload;\n      return { ...state };\n    case \"explore/SET_TOP_USERS_BY_REVIEWS\":\n      state.topUsersByReviews = action.payload;\n      return { ...state };\n    case \"explore/SET_TOP_USERS_BY_DATE_ADDED_OLDEST\":\n      state.topUsersByDateAddedOldest = action.payload;\n      return { ...state };\n    case \"explore/SET_TOP_USERS_BY_DATE_ADDED_NEWEST\":\n      state.topUsersByDateAddedNewest = action.payload;\n      return { ...state };\n    case \"explore/SET_FILTER\":\n      state.filter = action.payload;\n      return { ...state }\n    case \"explore/SET_SEARCH\":\n      state.search = action.payload;\n      return { ...state }\n    case \"explore/SET_FEED\":\n      state.feed = action.payload;\n      return {...state}\n    case \"explore/SET_SEARCH_RESULTS\":\n      state.searchResults = action.payload;\n      return { ...state };\n    default:\n      return state;\n  }\n}","import React from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { IFriends } from \"../redux/modules/user\";\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport CameraRollIcon from \"@material-ui/icons/CameraRoll\";\nimport { addFriend } from \"../redux/modules/user\";\n\nimport { RootState } from \"../redux\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport { loadProfile } from \"../redux/modules/explore\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\n\nconst mapStateToProps = (state: RootState) => ({\n  friends: state.user.friends,\n  friend_requests: state.user.friend_requests,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ loadProfile, addFriend }, dispatch);\n\ntype IMappedProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\ninterface IUnconnectedFriends extends IMappedProps {\n  closeDrawer: () => void;\n}\n\n/**\n * Component that renders a drawer containing a list of the current user's friends\n * @param props props taken from redux store.\n * @param {()=>void} closeDrawer function to close friends drawer\n */\nconst UnconnectedFriends = (props: IUnconnectedFriends) => {\n  const [search, setSearch] = React.useState<string>(\"\");\n  const [friendResults, setFriendResults] = React.useState<IFriends[]>(\n    props.friends || []\n  );\n\n  React.useEffect(() => {\n    setFriendResults(\n      props.friends.filter((friend) => friend.username.includes(search))\n    );\n  }, [props.friends]);\n\n  // handle friend searching\n  const handleSubmit = async (e: any): Promise<void> => {\n    e.preventDefault();\n    setFriendResults(\n      [...props.friends].filter((friend) => friend.username.includes(search))\n    );\n  };\n\n  // handle friend requests\n  let requestContent;\n  if (props.friend_requests.length > 0) {\n    // function that accepts a friend request through an api call\n    const acceptRequest = async (user: IFriends) => {\n      props.addFriend(user);\n      const response = await fetch(\"/api/friends/acceptFriendRequest\", {\n        method: \"post\",\n        body: JSON.stringify({ id: user._id }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      switch (response.status) {\n        case 200:\n          console.log(\"success\");\n          break;\n        default:\n          console.log(\"error\");\n      }\n    };\n    requestContent = (\n      <>\n        <div className=\"drawer-header\">\n          <h2>Friend Requests</h2>\n        </div>\n        <div className=\"drawer-body\">\n          {props.friend_requests.map((user, i) => (\n            <div\n              className={`friend-grid ${i % 2 === 0 && \"background-dark\"}`}\n              key={user.username}\n            >\n              <NavLink\n                onClick={() => props.loadProfile(user._id)}\n                to={`/explore/user/${user._id}`}\n              >\n                <div className=\"identicon-wrapper-small\">\n                  <svg className=\"avatar-small\">\n                    {user.avatar?.tilemap.map((row, y) =>\n                      row.map((col, x) => (\n                        <rect\n                          x={x * 17}\n                          y={y * 17}\n                          width={17}\n                          height={17}\n                          style={{\n                            fill:\n                              user.avatar?.tilemap[y][x] === 1\n                                ? user.avatar?.color\n                                : \"#101518\",\n                          }}\n                          key={`${x}-${y}-rect`}\n                        ></rect>\n                      ))\n                    )}\n                  </svg>\n                </div>\n              </NavLink>\n              <div className=\"username-title-small\">\n                <p>{user.username}</p>\n              </div>\n              <div className=\"username-title-small\">\n                <Tooltip title=\"Friends\">\n                  <p className=\"inline-flex text-small\">\n                    <AccountBoxIcon /> {user.friends.length}\n                  </p>\n                </Tooltip>\n                <span className=\"horizontal-padding\"> </span>\n                <Tooltip title=\"Movies\" className=\"margin-left\">\n                  <p className=\"inline-flex text-small margin-left-x\">\n                    <CameraRollIcon /> {user.friends.length}\n                  </p>\n                </Tooltip>\n              </div>\n              <span> </span>\n              <div className=\"text-right\">\n                <button\n                  type=\"button\"\n                  className=\"button-cancel margin-right friend-button\"\n                >\n                  Decline\n                </button>\n              </div>\n              <button\n                type=\"submit\"\n                className=\"button-submit friend-button\"\n                onClick={() => acceptRequest(user)}\n              >\n                Accept\n              </button>\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n  return (\n    <div className=\"drawer-content\">\n      {props.friend_requests && requestContent}\n      <div className=\"drawer-header\">\n        <h2>Friends</h2>\n      </div>\n      <div className=\"drawer-body\">\n        <form autoComplete=\"off\" onSubmit={handleSubmit}>\n          <div className=\"inline-flex full-width\">\n            <SearchIcon />\n            <input\n              type=\"text\"\n              aria-labelledby=\"movieSearchLabel\"\n              placeholder=\"Search\"\n              className=\"full-width\"\n              id=\"searchInput\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className=\"button-submit float-right margin-top\"\n          >\n            Search\n          </button>\n        </form>\n        {friendResults.map((user, i) => (\n          <NavLink\n            onClick={() => props.loadProfile(user._id)}\n            to={`/explore/user/${user._id}`}\n            className={`friend-grid ${i % 2 === 0 && \"background-dark\"}`}\n            key={user.username}\n          >\n            <div className=\"identicon-wrapper-small\">\n              <svg className=\"avatar-small\">\n                {user.avatar?.tilemap.map((row, y) =>\n                  row.map((col, x) => (\n                    <rect\n                      x={x * 17}\n                      y={y * 17}\n                      width={17}\n                      height={17}\n                      style={{\n                        fill:\n                          user.avatar?.tilemap[y][x] === 1\n                            ? user.avatar?.color\n                            : \"#101518\",\n                      }}\n                      key={`${x}-${y}-rect`}\n                    ></rect>\n                  ))\n                )}\n              </svg>\n            </div>\n            <div className=\"username-title-small\">\n              <p>{user.username}</p>\n            </div>\n            <div className=\"username-title-small\">\n              <Tooltip title=\"Friends\">\n                <p className=\"inline-flex text-small\">\n                  <AccountBoxIcon /> {user.friends.length}\n                </p>\n              </Tooltip>\n              <span className=\"horizontal-padding\"> </span>\n              <Tooltip title=\"Movies\" className=\"margin-left\">\n                <p className=\"inline-flex text-small margin-left-x\">\n                  <CameraRollIcon /> {user.friends.length}\n                </p>\n              </Tooltip>\n            </div>\n          </NavLink>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnconnectedFriends);\n","import React from \"react\";\nimport AddMovieDrawer from \"./AddMovieDrawer\";\nimport { Tooltip, Drawer } from \"@material-ui/core\";\nimport { IFriends } from \"../redux/modules/user\";\nimport { IMovieData } from \"../redux/modules/movies\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport moment from \"moment\";\nimport { RootState } from \"../redux\";\nimport { connect } from \"react-redux\";\nimport { isMobile, isBrowser } from \"react-device-detect\";\n\nconst mapStateToProps = (state: RootState) => ({\n  movies: state.movies.movies,\n});\n\ntype IProps = ReturnType<typeof mapStateToProps>;\n\ninterface IFeed extends IProps {\n  exploreMovies: IMovieData[];\n}\n\n/**\n * Component that renders movie feeds for a user's profile\n * @param props movies taken from movie redux store\n * @param {IMovieData[]} epxloreMovies another user's movie list passed to Feed component\n */\nconst Feed = (props: IFeed) => {\n  const [movieList] = React.useState<IMovieData[]>(() =>\n    props.exploreMovies.sort((a, b) =>\n      new Date(a.date_added.date) > new Date(b.date_added.date) ? -1 : 1\n    )\n  );\n  const [results, setResults] = React.useState<IMovieData[]>(movieList);\n  const [search, setSearch] = React.useState<string>(\"\");\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [selectedMovie, setSelectedMovie] = React.useState<IMovieData | null>(\n    null\n  );\n\n  // filter the movies based on searches\n  const handleSearchChange = (e: any) => {\n    const query = e.target.value;\n    setSearch(query);\n    setResults(\n      movieList.filter((movie) =>\n        movie.title?.toLowerCase().includes(query.toLowerCase())\n      )\n    );\n  };\n\n  const handleClick = (movie: IMovieData) => {\n    setSelectedMovie(movie);\n    setOpen(true);\n  };\n\n  const closeDrawer = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"profile-content margin-top\">\n      <SearchIcon className=\"form-icon explore-icon\" />\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        className=\"\"\n        value={search}\n        onChange={handleSearchChange}\n      />\n      <div className=\"vertical-padding\"></div>\n      {results.map((movie, i) => {\n        const entertainmentElements = new Array(5)\n          .fill(false)\n          .fill(true, 0, movie?.entertainment_rating);\n        const plotElements = new Array(5)\n          .fill(false)\n          .fill(true, 0, movie?.plot_rating);\n        const styleElements = new Array(5)\n          .fill(false)\n          .fill(true, 0, movie?.style_rating);\n        const biasElements = new Array(5)\n          .fill(false)\n          .fill(true, 0, movie?.bias_rating);\n        const ratingOrder = [\n          {\n            title: \"Entertainment\",\n            source: entertainmentElements,\n            value: movie.entertainment_rating,\n          },\n          {\n            title: \"Writing\",\n            source: plotElements,\n            value: movie.plot_rating,\n          },\n          {\n            title: \"Style\",\n            source: styleElements,\n            value: movie.style_rating,\n          },\n          {\n            title: \"Bias\",\n            source: biasElements,\n            value: movie.bias_rating,\n          },\n        ];\n        return (\n          <div\n            className=\"two-col-grid justify-center margin-top margin-bottom feed-item\"\n            key={movie.title}\n          >\n            <img\n              src={movie.poster}\n              alt={movie.title}\n              className=\"poster-large\"\n            />\n            <div className=\"full-width feed-rating\">\n              <h2 className={isBrowser ? \"text-left\" : \"\"}>\n                {movie.title}{\" \"}\n                {!props.movies?.find(\n                  (uMovie: IMovieData) => uMovie._id.toString() === movie._id\n                ) && (\n                  <Tooltip\n                    title=\"Add Movie\"\n                    aria-label=\"add_movie\"\n                    id=\"add_movie\"\n                    onClick={() => handleClick(movie)}\n                  >\n                    <button className=\"add-button\">+</button>\n                  </Tooltip>\n                )}\n              </h2>\n              {ratingOrder.map((rating) => (\n                <div className={isBrowser ? \"two-col-grid\" : \"feed-grid\"}>\n                  <p className=\"green text-left\">{rating.title}:</p>\n                  <div className=\"margin-top-x no-padding\">\n                    {rating.source.map((value: boolean) => (\n                      <div\n                        className={value ? \"rating-dot active\" : \"rating-dot\"}\n                      ></div>\n                    ))}\n                  </div>{\" \"}\n                </div>\n              ))}\n              <div className={isBrowser ? \"two-col-grid\" : \"feed-grid\"}>\n                <p className=\"green text-left\">Total Rating:</p>\n                <p className=\"text-left\">{movie.total_rating} / 20</p>\n              </div>\n              <div className={isBrowser ? \"two-col-grid\" : \"feed-grid\"}>\n                <p className=\"italics text-left\">\n                  {moment(movie.date_added.date).format(\"MMMM D, YYYY\")}\n                </p>\n              </div>\n              {isMobile && <div className=\"vertical-padding\"></div>}\n            </div>\n          </div>\n        );\n      })}\n      <Drawer\n        className=\"drawer\"\n        open={open}\n        anchor=\"right\"\n        onClose={closeDrawer}\n      >\n        <AddMovieDrawer closeDrawer={closeDrawer} propMovie={selectedMovie} />\n      </Drawer>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(Feed);\n","import React from \"react\";\nimport { RootState } from \"../redux\";\nimport { connect } from \"react-redux\";\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport TheatersIcon from \"@material-ui/icons/Theaters\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Logout from \"./Logout\";\nimport DeleteAccount from \"./DeleteAccount\";\nimport Friends from \"./Friends\";\nimport MetaTags from \"react-meta-tags\";\n\nimport \"../Styles/Profile.css\";\nimport { Tooltip, Drawer } from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\nimport Feed from \"./ProfileFeed\";\nimport { IMovieData } from \"../redux/modules/movies\";\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username,\n  avatar: state.user.avatar,\n  friends: state.user.friends,\n  reviews: state.user.reviews,\n  movies: state.movies.movies,\n  friend_requests: state.user.friend_requests,\n  favorite_movie: state.user.favorite_movie\n});\n\ntype IProfile = ReturnType<typeof mapStateToProps>;\n\n/**\n * Profile component that renders the logged in user's profile, including friends and feed.\n * @param props props taken from user redux store\n */\nconst UnconnectedProfile = (props: IProfile) => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [openLogoutDialog, setOpenLogoutDialog] = React.useState<boolean>(\n    false\n  );\n  const [openDeleteDialog, setOpenDeleteDialog] = React.useState<boolean>(\n    false\n  );\n  const [openDrawer, setOpenDrawer] = React.useState<boolean>(false);\n  const [section, setSection] = React.useState<string>(\"feed\");\n\n  return (\n    <div className=\"Profile margin-top\">\n      <MetaTags>\n        <title>Your Intake profile. | Intake</title>\n        <meta name=\"description\" content=\"See your feed, friends, and more at your Intake profile page.\" />\n      </MetaTags>\n      <div className=\"banner-container\">\n        <div className=\"identicon-wrapper float-left\">\n          <svg className=\"avatar\">\n            {props.avatar?.tilemap.map((row, y) =>\n              row.map((col, x) => (\n                <rect\n                  x={x * 25}\n                  y={y * 25}\n                  width={25}\n                  height={25}\n                  style={{\n                    fill:\n                      props.avatar?.tilemap[y][x] === 1\n                        ? props.avatar?.color\n                        : \"#171e22\",\n                  }}\n                  key={`${x}-${y}-rect`}\n                ></rect>\n              ))\n            )}\n          </svg>\n        </div>\n        <div className=\"username-title float-left\">\n          <h1>{props.username}</h1>\n        </div>\n        <div className=\"username-title float-right inline-flex\">\n          {props.friend_requests.length > 0 && (\n            <span className=\"profile-alert\">{props.friend_requests.length}</span>\n          )}\n          <Tooltip title=\"Friends\">\n            <button\n              type=\"button\"\n              aria-label=\"Friends Link\"\n              className=\"hover-green button-icon\"\n              onClick={() => setOpenDrawer(true)}\n            >\n              <p className=\"inline-flex text-small\">\n                <AccountBoxIcon /> {props.friends?.length}\n              </p>\n            </button>\n          </Tooltip>\n          <Tooltip title=\"Movies\" className=\"margin-left\">\n            <NavLink\n              to=\"/movies\"\n              aria-label=\"Movies Link\"\n              className=\"hover-green link true-white text-small button-icon\"\n            >\n              <p className=\"inline-flex text-small\">\n                <TheatersIcon /> {props.movies?.length}\n              </p>\n            </NavLink>\n          </Tooltip>\n          <Tooltip title=\"Settings\" className=\"margin-left\">\n            <button\n              type=\"button\"\n              aria-label=\"Account Settings Link\"\n              className=\"hover-green button-icon\"\n              onClick={(e) => setAnchorEl(e.currentTarget)}\n              aria-controls=\"profile-menu\"\n              aria-haspopup=\"true\"\n            >\n              <SettingsIcon />\n            </button>\n          </Tooltip>\n          <Menu\n            id=\"profile-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={() => setAnchorEl(null)}\n          >\n            <MenuItem onClick={() => setOpenLogoutDialog(true)}>Logout</MenuItem>\n            <MenuItem className=\"red\" onClick={() => setOpenDeleteDialog(true)}>\n              Delete Account\n            </MenuItem>\n          </Menu>\n          <DeleteAccount\n            open={openDeleteDialog}\n            closeDialog={() => setOpenDeleteDialog(false)}\n          />\n          <Logout\n            open={openLogoutDialog}\n            closeDialog={() => setOpenLogoutDialog(false)}\n          />\n          <Drawer\n            className=\"drawer\"\n            open={openDrawer}\n            anchor=\"right\"\n            onClose={() => setOpenDrawer(false)}\n          >\n            <Friends closeDrawer={() => setOpenDrawer(false)} />\n          </Drawer>\n        </div>\n      </div>\n      <div className=\"profile-container margin-top\">\n        {/* {section === \"favorite\" && <FavoriteMovie user={props.currentUser} />} */}\n        {section === \"feed\" && <Feed exploreMovies={props.movies as IMovieData[]} />} \n      </div>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(UnconnectedProfile);\n","import React from \"react\";\nimport \"../Styles/Login.css\";\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport { useParams, NavLink } from \"react-router-dom\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport { Tooltip } from \"@material-ui/core\";\nimport Snackbar from \"./Snackbar\";\nimport MetaTags from \"react-meta-tags\";\n\n/**\n * Component that renders a password reset form and sends reset emails to users\n */\nconst ResetPassword = () => {\n  const [email, setEmail] = React.useState<string>(\"\");\n  const [password, setPassword] = React.useState<string>(\"\");\n  const [comfirmPassword, setComfirmPassword] = React.useState<string>(\"\");\n  const [showPassword, setShowPassword] = React.useState<boolean>(false);\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [validToken, setValidToken] = React.useState<boolean>(true);\n  const [finished, setFinished] = React.useState<boolean>(false);\n  const [snackbarOpen, setSnackbarOpen] = React.useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = React.useState<string>(\"\");\n\n  const { id, token } = useParams();\n\n  // when the user follows the reset link sent to their email, send the jwt to the api server\n  React.useEffect(() => {\n    if (id && token) {\n      setLoading(true);\n      const asyncOps = async () => {\n        const response = await fetch(`/api/user/passwordReset/${id}/${token}`);\n        response.status !== 200 && setValidToken(false);\n        setLoading(false);\n      };\n      asyncOps();\n    }\n  }, [id, token]);\n\n  // send the inputted email to the api server to start the password reset process\n  const handleSubmit = async (e: any): Promise<void> => {\n    setErrorMessage(\"\");\n    e.preventDefault();\n    const response = await fetch(\"/api/user/passwordReset\", {\n      method: \"post\",\n      body: JSON.stringify({ email }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    console.log(response);\n    switch (response.status) {\n      case 200:\n        setSnackbarOpen(true);\n        break;\n      default:\n        setErrorMessage(\"An unexpected error occured. Try again soon.\");\n        setSnackbarOpen(true);\n    }\n  };\n\n  // verify that the user has entered valid passwords and send the new password to the api server\n  const handlePasswordReset = async (e: any): Promise<void> => {\n    e.preventDefault();\n\n    if (password === comfirmPassword) {\n      console.log(\"epic\");\n      const response = await fetch(`/api/user/passwordReset/${id}/${token}`, {\n        method: \"post\",\n        body: JSON.stringify({ password }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      console.log(response.status);\n      if (response.status === 200) setFinished(true);\n      else {\n        setErrorMessage(\"An unexpected error occured. Try again later.\");\n      }\n    } else {\n      setErrorMessage(\"Passwords don't match\");\n    }\n  };\n\n  if (loading) return <p>loading</p>;\n\n  if (!validToken) return <p>Reset link timed out...</p>;\n\n  if (finished)\n    return (\n      <div className=\"Login text-centered margin-top\">\n        <MetaTags>\n          <title>Reset your Intake account password. | INTAKE</title>\n          <meta\n            name=\"description\"\n            content=\"Enter your new password to complete the Intake account password reset process.\"\n          />\n        </MetaTags>\n        <p>\n          Password successfully reset. Please return to{\" \"}\n          <NavLink className=\"link white button-icon\" to=\"/login\">\n            login\n          </NavLink>{\" \"}\n        </p>\n      </div>\n    );\n\n  return (\n    <div className=\"Login text-centered margin-top\">\n      <MetaTags>\n        <title>Reset your Intake account password. | INTAKE</title>\n        <meta\n          name=\"description\"\n          content=\"Send a password reset email to the email linked to your Intake account to start the password reset process.\"\n        />\n      </MetaTags>\n      <h1>Reset Password</h1>\n      <div className=\"vertical-padding\"></div>\n      {id && token ? (\n        <form\n          onSubmit={handlePasswordReset}\n          className=\"text-centered login-form\"\n        >\n          <div className=\"inline-flex margin-top row-reverse\">\n            <input\n              aria-label=\"password\"\n              placeholder=\"Password\"\n              className=\"input-large margin-left\"\n              type={showPassword ? \"text\" : \"password\"}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Tooltip title={showPassword ? \"Hide Password\" : \"Show Password\"}>\n              <button\n                type=\"button\"\n                className=\"button-icon\"\n                aria-label={showPassword ? \"hide password\" : \"show password\"}\n                onClick={() =>\n                  showPassword ? setShowPassword(false) : setShowPassword(true)\n                }\n              >\n                {showPassword ? <LockOpenIcon /> : <LockIcon />}\n              </button>\n            </Tooltip>\n          </div>\n          <div className=\"inline-flex margin-top row-reverse\">\n            <input\n              aria-label=\"comfirm password\"\n              placeholder=\"Comfirm Password\"\n              className=\"input-large margin-left\"\n              type={showPassword ? \"text\" : \"password\"}\n              value={comfirmPassword}\n              onChange={(e) => setComfirmPassword(e.target.value)}\n            />\n            <button\n              type=\"button\"\n              className=\"button-icon\"\n              aria-label={showPassword ? \"hide password\" : \"show password\"}\n              onClick={() =>\n                showPassword ? setShowPassword(false) : setShowPassword(true)\n              }\n            >\n              {showPassword ? <LockOpenIcon /> : <LockIcon />}\n            </button>\n          </div>\n          <button\n            type=\"submit\"\n            className=\"button-submit float-right margin-top\"\n          >\n            Reset Password\n          </button>\n          <p className=\"red\">{errorMessage}</p>\n        </form>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"text-centered login-form\">\n          <div className=\"inline-flex\">\n            <AccountBoxIcon />\n            <input\n              type=\"text\"\n              placeholder=\"Email\"\n              className=\"input-large margin-left\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className=\"button-submit float-right margin-top\"\n          >\n            Send Reset Link\n          </button>\n        </form>\n      )}\n      <Snackbar\n        error={errorMessage}\n        open={snackbarOpen}\n        handleClose={() => setSnackbarOpen(false)}\n        success=\"Reset link sent\"\n      />\n    </div>\n  );\n};\n\nexport default ResetPassword;\n","import React from \"react\";\nimport { RootState } from \"../../redux\";\nimport { connect } from \"react-redux\";\nimport \"../../Styles/Profile.css\";\nimport \"../../Styles/Poster.css\";\nimport \"../../Styles/Explore.css\";\nimport \"../../Styles/ExplorePhone.css\";\nimport { useParams, Redirect } from \"react-router-dom\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport TheatersIcon from \"@material-ui/icons/Theaters\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Feed from \"../ProfileFeed\";\nimport MetaTags from \"react-meta-tags\";\n\nimport { loadProfile } from \"../../redux/modules/explore\";\nimport { addFriend } from \"../../redux/modules/user\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { IFriends } from \"../../redux/modules/user\";\n\nconst FavoriteMovie = (props: { user: IFriends }) => {\n  return (\n    <div id=\"favorite-movie-containter\">\n      {props.user.favorite_movie ? (\n        <p>yo</p>\n      ) : (\n        <div>\n          <div className=\"vertical-padding\"></div>\n          <p className=\"italics\">This user hasn't added a favorite movie.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  currentUser: state.explore.currentUser,\n  friends: state.user.friends,\n  username: state.user.username,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ loadProfile, addFriend }, dispatch);\n\ntype IViewProfile = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\n/**\n * Component that renders another users profile, including their all time feed.\n * @param {IViewProfile} props Component props taken from redux store.\n */\nconst ViewProfile = (props: IViewProfile) => {\n  const [addOpen, setAddOpen] = React.useState<boolean>(false);\n  const [section, setSection] = React.useState<\"favorite\" | \"feed\">(\"feed\");\n\n  const { id } = useParams();\n\n  if (!props.currentUser) {\n    props.loadProfile(id);\n    return <p>loading</p>;\n  }\n\n  if (props.currentUser?.username === props.username) {\n    console.log(props.currentUser);\n    return <Redirect to=\"/profile\" />;\n  }\n\n  const handleClose = () => {\n    setAddOpen(false);\n  };\n\n  const addFriend = async () => {\n    props.currentUser && props.addFriend(props.currentUser);\n    console.log(id);\n    const response = await fetch(\"/api/friends/addFriend\", {\n      method: \"post\",\n      body: JSON.stringify({ id }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    switch (response.status) {\n      case 200:\n        handleClose();\n        break;\n      default:\n        console.log(\"error!\");\n    }\n  };\n\n  return (\n    <div className=\"Profile margin-top\">\n      <MetaTags>\n        <title>See {props.currentUser.username}'s Intake | INTAKE</title>\n        <meta\n          name=\"description\"\n          content={`See ${props.currentUser.username}'s feed and friends. Add any movie that ${props.currentUser.username} and make a friend request if you like what you see so that their activity will show up in your feed.`}\n        />\n      </MetaTags>\n      <div className=\"banner-container\">\n        <div className=\"identicon-wrapper float-left\">\n          <svg className=\"avatar\">\n            {props.currentUser.avatar?.tilemap.map((row, y) =>\n              row.map((col, x) => (\n                <rect\n                  x={x * 25}\n                  y={y * 25}\n                  width={25}\n                  height={25}\n                  style={{\n                    fill:\n                      props.currentUser?.avatar?.tilemap[y][x] === 1\n                        ? props.currentUser?.avatar?.color\n                        : \"#171e22\",\n                  }}\n                  key={`${x}-${y}-rect`}\n                ></rect>\n              ))\n            )}\n          </svg>\n        </div>\n        <div className=\"username-title float-left\">\n          <h1>{props.currentUser.username}</h1>\n        </div>\n        <div\n          className=\"username-title float-right inline-flex bump-up\"\n          id=\"profileButtons\"\n        >\n          <Tooltip title=\"Friends\">\n            <p className=\"text-small\">\n              <AccountBoxIcon /> {props.currentUser.friends.length}\n            </p>\n          </Tooltip>\n          <Tooltip title=\"Movies\" className=\"margin-left\">\n            <p className=\"text-small\">\n              <TheatersIcon /> {props.currentUser.movies.length}\n            </p>\n          </Tooltip>\n          {!props.friends.find(\n            (friend) =>\n              props.currentUser &&\n              friend.username === props.currentUser.username\n          ) &&\n            props.username && (\n              <>\n                <Tooltip title=\"Add Friend\" className=\"margin-left\">\n                  <button\n                    type=\"button\"\n                    aria-label=\"Add Friend Link\"\n                    className=\"hover-green button-icon\"\n                    onClick={() => setAddOpen(true)}\n                    aria-controls=\"add-friend-dialog\"\n                    aria-haspopup=\"true\"\n                  >\n                    <PersonAddIcon />\n                  </button>\n                </Tooltip>\n                <Dialog\n                  open={addOpen}\n                  onClose={handleClose}\n                  aria-labelledby=\"add-friend-title\"\n                  aria-describedby=\"add-friend-description\"\n                  id=\"add-friend-dialog\"\n                >\n                  <DialogTitle id=\"add-friend-title\">{`Add ${props.currentUser.username} as a friend?`}</DialogTitle>\n                  <DialogContent>\n                    <DialogContentText id=\"add-friend-description\">\n                      Once {props.currentUser.username} accepts your friend\n                      request, their movie ratings and reviews will be added to\n                      your explore feed.\n                    </DialogContentText>\n                  </DialogContent>\n                  <DialogActions>\n                    <button className=\"button-cancel\" onClick={handleClose}>\n                      Cancel\n                    </button>\n                    <button className=\"button-submit\" onClick={addFriend}>\n                      Add Friend\n                    </button>\n                  </DialogActions>\n                </Dialog>\n              </>\n            )}\n        </div>\n      </div>\n      <div className=\"profile-container\">\n        {section === \"favorite\" && <FavoriteMovie user={props.currentUser} />}\n        {section === \"feed\" && (\n          <Feed exploreMovies={props.currentUser.movies} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewProfile);\n","import React from \"react\";\nimport { IFriends } from \"../../redux/modules/user\";\nimport { NavLink } from \"react-router-dom\";\nimport { Tooltip } from \"@material-ui/core\";\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport TheatersIcon from \"@material-ui/icons/Theaters\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport Snackbar from \"../Snackbar\";\n\nimport { RootState } from \"../../redux\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport { loadProfile } from \"../../redux/modules/explore\";\nimport { addFriend } from \"../../redux/modules/user\";\n\nconst mapStateToProps = (state: RootState) => ({\n  friends: state.user.friends,\n  username: state.user.username,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ loadProfile, addFriend }, dispatch);\n\ntype IMappedState = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\ninterface IUserFeed extends IMappedState {\n  users: IFriends[];\n}\n\n/**\n * Component that renders a feed of the top users that match a search or filter criteria.\n * @param {IUserFeed} props Component props taken from redux store.\n * @param {IFriends[]} props.users List of users that match the filter criteria\n */\nconst UserFeed = (props: IUserFeed) => {\n  const [addOpen, setAddOpen] = React.useState<boolean>(false);\n  const [selectedUser, setSelectedUser] = React.useState<IFriends | null>(null);\n  const [snackbarOpen, setSnackbarOpen] = React.useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n  const handleClose = () => {\n    setAddOpen(false);\n  };\n\n  /**\n   * Sends an api request to add the specified user as a friend\n   * @param {IFriends} user User data to be passed to the api server \n   */\n  const addFriend = async (user: IFriends) => {\n    setErrorMessage('');\n    const response = await fetch(\"/api/friends/addFriend\", {\n      method: \"post\",\n      body: JSON.stringify({ id: user._id }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    switch (response.status) {\n      case 200:\n        props.addFriend(user);\n        handleClose();\n        setSnackbarOpen(true);\n        break;\n      default:\n        const err = await response.json();\n        handleClose();\n        setErrorMessage(err.error);\n        setSnackbarOpen(true);\n    }\n  };\n\n  const handleAddFriend = (user: IFriends) => {\n    setSelectedUser(user);\n    setAddOpen(true);\n  };\n\n  return (\n    <div className=\"user-feed\">\n      {props.users.map((user) => {\n        const isFriend = props.friends.find(\n          (friend) => user && friend.username === user.username\n        );\n        return (\n          <div\n            className={\n              !isFriend && props.username !== user.username\n                ? \"user-container\"\n                : \"user-container-friend\"\n            }\n            key={user.username}\n          >\n            <NavLink\n              onClick={() => props.loadProfile(user._id)}\n              to={`/explore/user/${user._id}`}\n            >\n              <div className=\"identicon-wrapper\">\n                <svg className=\"avatar\">\n                  {user.avatar?.tilemap.map((row, y) =>\n                    row.map((col, x) => (\n                      <rect\n                        x={x * 25}\n                        y={y * 25}\n                        width={25}\n                        height={25}\n                        style={{\n                          fill:\n                            user.avatar?.tilemap[y][x] === 1\n                              ? user.avatar?.color\n                              : \"#171e22\",\n                        }}\n                        key={`${x}-${y}-rect`}\n                      ></rect>\n                    ))\n                  )}\n                </svg>\n              </div>\n            </NavLink>\n            <NavLink\n              onClick={() => props.loadProfile(user._id)}\n              to={`/explore/user/${user._id}`}\n              className=\"link white hover-green\"\n            >\n              <h2 className=\"username\">\n                {user.username}{\" \"}\n                <p className=\"italics text-small grey\">\n                  User since{\" \"}\n                  {moment(user.date_registered).format(\"MMM DD, YYYY\")}\n                </p>\n              </h2>\n            </NavLink>\n            <div className=\"icons\">\n              {props.username && !isFriend && props.username !== user.username && (\n                <>\n                  <Tooltip title=\"Add Friend\" className=\"icon\">\n                    <p className=\"text-small\">\n                      <button\n                        type=\"button\"\n                        aria-label=\"Add Friend Link\"\n                        className=\"hover-green button-icon\"\n                        onClick={() => handleAddFriend(user)}\n                        aria-controls=\"add-friend-dialog\"\n                        aria-haspopup=\"true\"\n                      >\n                        <PersonAddIcon />\n                      </button>\n                    </p>\n                  </Tooltip>\n                </>\n              )}\n              <Tooltip title=\"Friends\" className=\"icon\">\n                <p className=\"text-small\">\n                  <AccountBoxIcon /> {user.friends.length}\n                </p>\n              </Tooltip>\n              <Tooltip title=\"Movies\" className=\"icon\">\n                <p className=\"text-small\">\n                  <TheatersIcon /> {user.movies.length}\n                </p>\n              </Tooltip>\n              <Tooltip title=\"Reviews\" className=\"icon\">\n                <p className=\"text-small\">\n                  <ChatBubbleIcon /> {user.reviews.length}\n                </p>\n              </Tooltip>\n            </div>\n          </div>\n        );\n      })}\n      <Dialog\n        open={addOpen}\n        onClose={handleClose}\n        aria-labelledby=\"add-friend-title\"\n        aria-describedby=\"add-friend-description\"\n        id=\"add-friend-dialog\"\n      >\n        <DialogTitle id=\"add-friend-title\">{`Add  ${selectedUser?.username} as a friend?`}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"add-friend-description\">\n            Once {selectedUser?.username} accepts your friend request, their\n            movie ratings and reviews will be added to your explore feed.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <button className=\"button-cancel\" onClick={handleClose}>\n            Cancel\n          </button>\n          <button\n            className=\"button-submit\"\n            onClick={() => addFriend(selectedUser as IFriends)}\n          >\n            Add Friend\n          </button>\n        </DialogActions>\n      </Dialog>\n      <Snackbar error={errorMessage} success=\"Friend request sent\" handleClose={()=>setSnackbarOpen(false)} open={snackbarOpen} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserFeed);\n","import React from \"react\";\nimport UserFeed from \"./UserFeed\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nimport { RootState } from \"../../redux\";\nimport { setTopUsers, setFilter, setSearch } from \"../../redux/modules/explore\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport { IFriends } from \"../../redux/modules/user\";\n\nconst mapStateToProps = (state: RootState) => ({\n  topUsersByMovies: state.explore.topUsersByMovies,\n  topUsersByFriends: state.explore.topUsersByFriends,\n  topUsersByReviews: state.explore.topUsersByReviews,\n  topUsersByDateAddedOldest: state.explore.topUsersByDateAddedOldest,\n  topUsersByDateAddedNewest: state.explore.topUsersByDateAddedNewest,\n  filter: state.explore.filter,\n  search: state.explore.search,\n  searchResults: state.explore.searchResults\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ setTopUsers, setFilter, setSearch }, dispatch);\n\ntype IUsers = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\n  /**\n   * Users component renders a container for the user feed.\n   * @param {IUsers} props Component props taken from redux store.\n   */\nconst Users = (props: IUsers) => {\n  const [users, setUsers] = React.useState<IFriends[]>([]);\n\n  // Whenever the filter is changed, get the top users based on that filter\n  React.useEffect(() => {\n    switch (props.filter) {\n      case \"movies\":\n        if (!props.topUsersByMovies) props.setTopUsers(\"movies\");\n        break;\n      case \"friends\":\n        if (!props.topUsersByFriends) props.setTopUsers(\"friends\");\n        break;\n      case \"reviews\":\n        if (!props.topUsersByReviews) props.setTopUsers(\"reviews\");\n        break;\n      case \"date_added_oldest\":\n        if (!props.topUsersByDateAddedOldest)\n          props.setTopUsers(\"date_added_oldest\");\n        break;\n      case \"date_added_newest\":\n        if (!props.topUsersByDateAddedNewest)\n          props.setTopUsers(\"date_added_newest\");\n        break;\n    }\n  }, [props.filter]);\n\n  React.useEffect(() => {\n    switch (props.filter) {\n      case \"movies\":\n        props.topUsersByMovies && setUsers(props.topUsersByMovies);\n        break;\n      case \"friends\":\n        props.topUsersByFriends && setUsers(props.topUsersByFriends);\n        break;\n      case \"reviews\":\n        props.topUsersByReviews && setUsers(props.topUsersByReviews);\n        break;\n      case \"date_added_oldest\":\n        props.topUsersByDateAddedOldest &&\n          setUsers(props.topUsersByDateAddedOldest);\n        break;\n      case \"date_added_newest\":\n        props.topUsersByDateAddedNewest &&\n          setUsers(props.topUsersByDateAddedNewest);\n        break;\n    }\n    if(props.search) {\n      setUsers(props.searchResults);\n    }\n  }, [props]);\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"two-col-grid margin-top\">\n        <form onSubmit={(e) => e.preventDefault()} className=\"align-right\">\n          <select\n            aria-label=\"user filter\"\n            value={props.filter}\n            onChange={(e) => props.setFilter(e.target.value)}\n            className=\"float-right margin-top explore-select\"\n          >\n            <option value=\"movies\">Movies Seen</option>\n            <option value=\"friends\">Friends</option>\n            <option value=\"reviews\">Reviews</option>\n            <option value=\"date_added_oldest\">Date Registered (Oldest)</option>\n            <option value=\"date_added_newest\">Date Registered (Newest)</option>\n          </select>\n        </form>\n        <form onSubmit={(e) => e.preventDefault()} className=\"align-left bump-down-form\">\n          <div className=\"inline-flex\">\n            <SearchIcon className=\"form-icon\" />\n            <input\n              type=\"text\"\n              value={props.search}\n              onChange={(e) => props.setSearch(e.target.value)}\n              placeholder=\"Search\"\n              className=\"explore-input\"\n            />\n          </div>\n        </form>\n      </div>\n      <UserFeed users={users} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\n","import React from \"react\";\nimport { RootState } from \"../../redux\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport { getFeed, loadProfile } from \"../../redux/modules/explore\";\nimport moment from \"moment\";\nimport { NavLink } from \"react-router-dom\";\nimport { Tooltip, Drawer } from \"@material-ui/core\";\nimport { IMovieData } from \"../../redux/modules/movies\";\nimport AddMovieDrawer from \"../AddMovieDrawer\";\n\nconst mapStateToProps = (state: RootState) => ({\n  friends: state.user.friends,\n  feed: state.explore.feed,\n  movies: state.movies.movies,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ getFeed, loadProfile }, dispatch);\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\n  /**\n   * Component that renders the current user's monthly feed.\n   * @param {Props} props properties taken from redux store.\n   */\nconst Feed = (props: Props) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [selectedMovie, setSelectedMovie] = React.useState<IMovieData | null>(\n    null\n  );\n\n  const closeDrawer = () => {\n    setOpen(false);\n  };\n\n  const handleClick = (movie: IMovieData) => {\n    setSelectedMovie(movie);\n    setOpen(true);\n  };\n\n  if (!props.feed) {\n    props.getFeed();\n    return <p>loading</p>;\n  }\n\n  if(props.feed.length === 0){\n    return (\n      <div className=\"profile-content margin-top\">\n        <p className=\"grey italics\">Your friends haven't been very active... check back soon!</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"profile-content margin-top\">\n      {props.feed.map((entry, i) => {\n        const movie = entry.movie;\n        const entertainmentElements = new Array(5).fill(false);\n        const plotElements = new Array(5).fill(false);\n        const styleElements = new Array(5).fill(false);\n        const biasElements = new Array(5).fill(false);\n        const ratingOrder = [\n          {\n            title: \"Entertainment\",\n            source: entertainmentElements,\n            value: movie.entertainment_rating,\n          },\n          {\n            title: \"Writing\",\n            source: plotElements,\n            value: movie.plot_rating,\n          },\n          {\n            title: \"Style\",\n            source: styleElements,\n            value: movie.style_rating,\n          },\n          {\n            title: \"Bias\",\n            source: biasElements,\n            value: movie.bias_rating,\n          },\n        ];\n        return (\n          <div className=\"feed-item\" key={entry.movie.title}>\n            <div\n              className=\"two-col-grid margin-top margin-bottom\"\n              key={movie.title}\n            >\n              <div className=\"feed-poster\">\n                <img\n                  src={movie.poster}\n                  alt={movie.title}\n                  className=\"poster-large\"\n                />\n              </div>\n\n              <div className=\"full-width feed-rating\">\n                <h2 className=\"feed-title\">\n                  {movie.title}{\" \"}\n                  {!props.movies?.find(\n                    (movie: IMovieData) => movie._id === entry.movie._id\n                  ) && (\n                    <Tooltip\n                      title=\"Add Movie\"\n                      aria-label=\"add_movie\"\n                      id=\"add_movie\"\n                      onClick={() => handleClick(entry.movie)}\n                    >\n                      <button className=\"add-button\">+</button>\n                    </Tooltip>\n                  )}\n                </h2>\n                {ratingOrder.map((rating) => (\n                  <div\n                    className=\"feed-grid\"\n                    key={`${entry.movie.title}_${rating.title}`}\n                  >\n                    <p className=\"green text-left\">{rating.title}:</p>\n                    <div className=\"margin-top-x no-padding\">\n                      {rating.source.map((value: boolean, i: number) => (\n                        <div\n                          className=\"rating-dot\"\n                          key={`${entry.movie.title}_${\n                            rating.title\n                          }_${i.toString()}`}\n                        >\n                          {/* check if current dot should be filled */}\n                          {rating.value - i > 0 &&\n                            (rating.value - i < 1 ? (\n                              <div className=\"rating-dot-filler\"></div>\n                            ) : (\n                              <div\n                                className=\"rating-dot-filler\"\n                                style={{ width: \"10px\" }}\n                              ></div>\n                            ))}\n                        </div>\n                      ))}\n                    </div>{\" \"}\n                  </div>\n                ))}\n                <div className=\"feed-grid\">\n                  <p className=\"green text-left\">Total Rating:</p>\n                  <p className=\"text-left\">{movie.total_rating} / 20</p>\n                </div>\n                <NavLink\n                  onClick={() => props.loadProfile(entry.user_id)}\n                  to={`/explore/user/${entry.user_id}`}\n                  className=\"feed-user-container link white\"\n                  aria-label={`See ${entry.username}'s profile`}\n                >\n                  <div className=\"feed-avatar-wrapper\">\n                    <svg className=\"feed-avatar\">\n                      {entry.avatar?.tilemap.map((row, y) =>\n                        row.map((col, x) => (\n                          <rect\n                            x={x * 6}\n                            y={y * 6}\n                            width={6}\n                            height={6}\n                            style={{\n                              fill:\n                                entry.avatar?.tilemap[y][x] === 1\n                                  ? entry.avatar?.color\n                                  : \"#171e22\",\n                            }}\n                            key={`${x}-${y}-rect`}\n                          ></rect>\n                        ))\n                      )}\n                    </svg>\n                  </div>\n                  <p className=\"feed-username\">{entry.username}</p>\n                </NavLink>\n                <div className=\"feed-date\">\n                  <p className=\"italics gray full-width\">\n                    {moment(entry.movie.date_added.date).format(\"MMM DD, YYYY\")}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n      <Drawer\n        className=\"drawer\"\n        open={open}\n        anchor=\"right\"\n        onClose={closeDrawer}\n      >\n        <AddMovieDrawer closeDrawer={closeDrawer} propMovie={selectedMovie} />\n      </Drawer>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feed);\n","import React from \"react\";\nimport { RootState } from \"../../redux\";\nimport { connect } from \"react-redux\";\nimport { IMovieData, IAverageMovieData } from \"../../redux/modules/movies\";\nimport AddMovieDrawer from \"../AddMovieDrawer\";\nimport { Tooltip, Drawer } from \"@material-ui/core\";\nimport { format } from \"util\";\n\nconst mapStateToProps = (state: RootState) => ({\n  userMovies: state.movies.movies,\n});\n\ntype IProps = ReturnType<typeof mapStateToProps>;\n\ninterface IMovieFeed extends IProps {\n  movies: IAverageMovieData[] | null;\n}\n\n/**\n * Component that renders a feed with the top movies.\n * @param {IMovieFeed} props Component properties taken from redux store.\n * @param {IAverageMovieData[] | null} props.movies A list of the top movies and their average ratings.\n */\nconst MovieFeed = (props: IMovieFeed) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [selectedMovie, setSelectedMovie] = React.useState<IMovieData | null>(\n    null\n  );\n\n  const closeDrawer = () => {\n    setOpen(false);\n  };\n\n  const handleClick = (movie: IAverageMovieData) => {\n    let formattedMovie: IMovieData;\n    formattedMovie = Object.assign({...movie})\n    setSelectedMovie(formattedMovie);\n    setOpen(true);\n  };\n\n  return (\n    <div className=\"profile-content margin-top\">\n      {/* Map the movie list to feed items */}\n      {props.movies && props.movies.length > 0 ? (\n        props.movies?.map((movie, i) => {\n          if (!movie.entertainment_rating_average)\n            movie.entertainment_rating_average = 0;\n          if (!movie.plot_rating_average) movie.plot_rating_average = 0;\n          if (!movie.style_rating_average) movie.style_rating_average = 0;\n          if (!movie.bias_rating_average) movie.bias_rating_average = 0;\n          if (!movie.total_rating_average) movie.total_rating_average = 0;\n          const entertainmentElements = new Array(5).fill(false);\n          const plotElements = new Array(5).fill(false);\n          const styleElements = new Array(5).fill(false);\n          const biasElements = new Array(5).fill(false);\n          const ratingOrder = [\n            {\n              title: \"Entertainment\",\n              source: entertainmentElements,\n              value: Number(movie.entertainment_rating_average.toLocaleString('fullwide', {maximumFractionDigits: 2})),\n            },\n            {\n              title: \"Writing\",\n              source: plotElements,\n              value: Number(movie.plot_rating_average.toLocaleString('fullwide', {maximumFractionDigits: 2})),\n            },\n            {\n              title: \"Style\",\n              source: styleElements,\n              value: Number(movie.style_rating_average.toLocaleString('fullwide', {maximumFractionDigits: 2})),\n            },\n            {\n              title: \"Bias\",\n              source: biasElements,\n              value: Number(movie.bias_rating_average.toLocaleString('fullwide', {maximumFractionDigits: 2})),\n            },\n          ];\n          return (\n            <div className=\"feed-item\" key={movie._id}>\n              <div\n                className=\"two-col-grid margin-top margin-bottom\"\n                key={movie.title}\n              >\n                <div className=\"feed-poster\">\n                  <img\n                    src={movie.poster}\n                    alt={movie.title}\n                    className=\"poster-large\"\n                  />\n                </div>\n\n                <div className=\"full-width feed-rating\">\n                  <h2 className=\"feed-title\">\n                    {movie.title}{\" \"}\n                    {!props.userMovies?.find(\n                      (uMovie: IMovieData) => uMovie._id.toString() === movie._id\n                    ) && (\n                      <Tooltip\n                        title=\"Add Movie\"\n                        aria-label=\"add_movie\"\n                        id=\"add_movie\"\n                        onClick={() => handleClick(movie)}\n                      >\n                        <button className=\"add-button\">+</button>\n                      </Tooltip>\n                    )}\n                  </h2>\n                  {ratingOrder.map((rating) => (\n                    <div\n                      className=\"feed-grid\"\n                      key={`${rating.title}_${movie.title}`}\n                    >\n                      <p className=\"green text-left\">{rating.title}:</p>\n                      <div className=\"margin-top-x no-padding\">\n                        {rating.source.map((value: boolean, i: number) => (\n                          <div\n                            className=\"rating-dot\"\n                            key={`${rating.title}_${movie.title}_${i}`}\n                          >\n                            {/* check if current dot should be filled */}\n                            {rating.value - i > 0 &&\n                              (rating.value - i < 1 ? (\n                                <div\n                                  className=\"rating-dot-filler\"\n                                  style={{\n                                    width: `${(rating.value - i) * 10}px`,\n                                  }}\n                                ></div>\n                              ) : (\n                                <div\n                                  className=\"rating-dot-filler\"\n                                  style={{ width: \"10px\" }}\n                                ></div>\n                              ))}\n                          </div>\n                        ))}\n                      </div>{\" \"}\n                    </div>\n                  ))}\n                  <div className=\"feed-grid\">\n                    <p className=\"green text-left\">Total Rating:</p>\n                    <p className=\"text-left\">\n                      {movie.total_rating_average.toLocaleString('fullwide', {maximumFractionDigits: 2})} / 20\n                    </p>\n                  </div>\n                  <div className=\"feed-grid\">\n                    <p className=\"green text-left\">Total Entries: </p>\n                    <p className=\"text-left\">{movie.ratings_length}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })\n      ) : (\n        <p className=\"italics grey\">No movies matches your query</p>\n      )}\n      <Drawer\n        className=\"drawer\"\n        open={open}\n        anchor=\"right\"\n        onClose={closeDrawer}\n      >\n        <AddMovieDrawer closeDrawer={closeDrawer} propMovie={selectedMovie} />\n      </Drawer>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(MovieFeed);\n","import React from \"react\";\nimport MovieFeed from \"./MovieFeed\";\n\nimport { RootState } from \"../../redux\";\nimport {\n  setTopMovies,\n  setFilter,\n  IAverageMovieData,\n  searchMovies,\n  setSearch\n} from \"../../redux/modules/movies\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst mapStateToProps = (state: RootState) => ({\n  topMoviesByPopularity: state.movies.topMoviesByPopularity,\n  topMoviesByEntertainment: state.movies.topMoviesByEntertainment,\n  topMoviesByBias: state.movies.topMoviesByBias,\n  topMoviesByPlot: state.movies.topMoviesByPlot,\n  topMoviesByStyle: state.movies.topMoviesByStyle,\n  topMoviesByTotal: state.movies.topMoviesByTotal,\n  filter: state.movies.filter,\n  search: state.movies.search,\n  searchResults: state.movies.searchResults,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ setTopMovies, setFilter, searchMovies, setSearch }, dispatch);\n\ntype ITopMovies = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\n  /**\n   * Component that renders a container for the movie feed, including a filter selector and a searchbar.\n   * @param {ITopMovies} props component props taken from redux store.\n   */\nconst TopMovies = (props: ITopMovies) => {\n  const [movies, setMovies] = React.useState<IAverageMovieData[] | null>([]);\n\n  const filterMap: { [key: string]: IAverageMovieData[] | null } = {\n    popularity: props.topMoviesByPopularity,\n    total: props.topMoviesByTotal,\n    entertainment: props.topMoviesByEntertainment,\n    plot: props.topMoviesByPlot,\n    style: props.topMoviesByStyle,\n    bias: props.topMoviesByBias,\n  };\n  React.useEffect(() => {\n    if (!filterMap[props.filter]) {\n      props.setTopMovies(props.filter);\n    }\n  }, [props.filter]);\n\n  React.useEffect(() => {\n    if(props.searchResults && props.search){\n      return setMovies(props.searchResults);\n    }\n    if (filterMap[props.filter]) {\n      setMovies(filterMap[props.filter]);\n    }\n    if(!props.filter){\n      setMovies(filterMap['popularity']);\n    }\n  }, [props]);\n\n  const handleSearch = (e: any) => {\n    props.setSearch(e.target.value);\n    props.searchMovies(e.target.value);\n  }\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"two-col-grid margin-top\">\n        <form onSubmit={(e) => e.preventDefault()} className=\"align-right\">\n          <select\n            aria-label=\"movie filter\"\n            value={props.filter}\n            onChange={(e) => props.setFilter(e.target.value)}\n            className=\"float-right margin-top explore-select\"\n            defaultValue=\"popularity\"\n          >\n            <option value=\"popularity\">Most Popular</option>\n            <option value=\"total\">Highest Rated</option>\n            <option value=\"entertainment\">Most Entertaining</option>\n            <option value=\"plot\">Best Written</option>\n            <option value=\"style\">Most Stylish</option>\n            <option value=\"bias\">Most Biased</option>\n          </select>\n        </form>\n        <form\n          onSubmit={(e) => e.preventDefault()}\n          className=\"align-left bump-down-form\"\n        >\n          <div className=\"inline-flex\">\n            <SearchIcon className=\"form-icon\" />\n            <input\n              type=\"text\"\n              value={props.search}\n              onChange={handleSearch}\n              placeholder=\"Search\"\n              className=\"explore-input\"\n            />\n          </div>\n        </form>\n      </div>\n      <MovieFeed movies={movies} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopMovies);\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"../Styles/Profile.css\";\nimport \"../Styles/Explore.css\";\nimport \"../Styles/ExplorePhone.css\";\nimport ViewProfile from \"./ExploreComponents/ViewProfile\";\nimport Users from \"./ExploreComponents/Users\";\nimport Feed from \"./ExploreComponents/Feed\";\nimport TopMovies from \"./ExploreComponents/TopMovies\";\nimport MetaTags from \"react-meta-tags\";\n\nimport { RootState } from \"../redux\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username,\n});\n\ntype Props = ReturnType<typeof mapStateToProps>;\n\n/**\n * Container for the explore section\n * @param {Props} props Component properties taken from redux store\n */\nconst Explore = (props: Props) => {\n  const [section, setSection] = React.useState<\"movies\" | \"users\" | \"feed\">(\n    props.username ? \"feed\" : \"movies\"\n  );\n  \n  // check if the current route should lead to a user's profile page\n  const { type, id } = useParams();\n  if (type) {\n    switch (type) {\n      case \"user\":\n        if (id) return <ViewProfile />;\n    }\n  }\n  return (\n    <div className=\"Explore margin-top\">\n      <MetaTags>\n        <title>Explore the Intake community | INTAKE</title>\n        <meta name=\"description\" content=\"Explore what the Intake community has been up to. See friends' feeds and top rated movies, and find new friends.\" />\n      </MetaTags>\n      <h1>Explore</h1>\n      <div className=\"explore-nav-container\">\n        <nav className=\"explore-nav\">\n          {props.username && (\n            <button\n              className={`button-icon margin-right ${\n                section === \"feed\" && \"green\"\n              }`}\n              onClick={() => setSection(\"feed\")}\n            >\n              Feed\n            </button>\n          )}\n\n          <button\n            className={`button-icon margin-right ${\n              section === \"movies\" && \"green\"\n            }`}\n            onClick={() => setSection(\"movies\")}\n          >\n            Movies\n          </button>\n          <button\n            className={`button-icon margin-right margin-left ${\n              section === \"users\" && \"green\"\n            }`}\n            onClick={() => setSection(\"users\")}\n          >\n            Users\n          </button>\n        </nav>\n      </div>\n\n      {/* conditionally render sectional components */}\n      {section === \"users\" && <Users />}\n      {section === \"movies\" && <TopMovies />}\n      {section === \"feed\" && props.username && <Feed />}\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(Explore);\n","import React from \"react\";\nimport { ResponsiveBubble } from \"@nivo/circle-packing\";\nimport { bubbleColors, IEntity } from \"../StatProperty\";\nimport { setSearch } from \"../../redux/modules/explore\";\nimport { NavLink } from \"react-router-dom\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { BrowserView, MobileView } from \"react-device-detect\";\n\ninterface IBubble {\n  values: IEntity;\n  filter: string;\n  link: string;\n}\n\ninterface IRoot {\n  name: string;\n  loc: number;\n  value: number;\n  movies: number;\n}\n\n/**\n * A function that formats bubble data.\n * @param {IEntity} values The property values that statistics are gathered from\n * @param {string} filter The property to gather values from\n */\nconst formatData = (values: IEntity, filter: string): IRoot[] => {\n  const allKeys = Object.keys(values);\n  const lowestValue =\n    allKeys.length > 0 &&\n    values[\n      allKeys.reduce((acc, key) =>\n        values[key][filter] < values[acc][filter] ? key : acc\n      )\n    ][filter];\n  const formatted = allKeys.map((key) => ({\n    name: key,\n    loc: values[key][filter] - (lowestValue - 1),\n    value: values[key][filter],\n    movies: values[key].movies,\n  }));\n  return formatted;\n};\n\n/**\n * Bubble chart component\n * @param {IBubble} props component props\n * @param {IEntity} props.values The property values that statistics are gathered from.\n * @param {string} props.filter The property to gather values from\n * @param {string} props.link The base pathname for all links in legend\n */\nconst Bubble = React.memo((props: IBubble) => {\n  const [color] = React.useState<string[]>(\n    bubbleColors[Math.floor(Math.random() * bubbleColors.length)]\n  );\n  const [data, setData] = React.useState<IRoot[]>([]);\n  const [sortedData, setSortedData] = React.useState<IRoot[]>([]);\n  const root = {\n    name: \"root\",\n    color: \"hsl(1, 70%, 50%)\",\n    children: data,\n  };\n\n    // Format data whenever new props are passed down to Bubble component\n  React.useEffect(() => {\n    const formatted = formatData(props.values, props.filter);\n    setData([...formatted]);\n    formatted.sort((a, b) => b.value - a.value);\n    setSortedData(formatted);\n  }, [props]);\n\n  if (data.length === 0) {\n    return <p>no data has been collected yet</p>;\n  }\n\n  // Map values to colors\n  const highestValue = root.children.reduce((acc, e) =>\n    e.loc > acc.loc ? e : acc\n  ).loc;\n  const reducer =\n    highestValue < color.length ? 1 : Math.ceil(highestValue / color.length);\n  const colorFunc = (data: any) => {\n    if (data.name === \"root\") {\n      return \"#1E262A\";\n    } else {\n      return color[Math.ceil(data.loc / reducer) - 1];\n    }\n  };\n\n  const createLabel = (e: any) => {\n    return `${e.id}`;\n  };\n\n  const createTooltip = (data: any) => {\n    if (data.data.name !== \"root\") {\n      return (\n        <p className=\"tooltip inline-flex bubble-tooltip\">\n          <span\n            className=\"color-indicator\"\n            style={{ backgroundColor: data.color }}\n          ></span>\n          {data.data.name}: {data.data.value}\n        </p>\n      );\n    }\n  };\n\n  const theme = {\n    tooltip: {\n      container: {\n        padding: 0,\n      },\n    },\n  };\n\n  // Return Bubble JSX (using Nivo Responsive Bubble)\n  return (\n    <div className=\"bubble-container\">\n      <div className=\"bubble\">\n        <ResponsiveBubble\n          root={root}\n          theme={theme}\n          margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n          identity=\"name\"\n          value=\"loc\"\n          colors={colorFunc}\n          padding={6}\n          labelSkipRadius={50}\n          label={createLabel}\n          labelTextColor={\"black\"}\n          borderWidth={2}\n          borderColor={{ from: \"color\" }}\n          animate={true}\n          tooltip={createTooltip}\n          motionStiffness={90}\n          motionDamping={12}\n          isZoomable={false}\n          onMouseEnter={(e: any) => console.log(e)}\n        />\n      </div>\n      <div className=\"legend\">\n        <h3>Legend</h3>\n        {sortedData.map((entity, i) => (\n          <div className=\"legend-entry\" key={entity.name}>\n            <div className=\"row\">\n              <div\n                className=\"legend-indicator\"\n                style={{ backgroundColor: colorFunc(entity) }}\n              ></div>\n              <BrowserView>\n                <Tooltip title={`See stats for ${entity.name} movies`}>\n                  <NavLink\n                    to={`${props.link}/${entity.name}`}\n                    className=\"green link\"\n                  >\n                    {entity.name}\n                  </NavLink>\n                </Tooltip>{\" \"}\n                :{\" \"}\n                {entity.value.toLocaleString(\"fullwide\", {\n                  maximumFractionDigits: 2,\n                })}\n              </BrowserView>\n              <MobileView>\n                <Tooltip title={`See stats for ${entity.name} movies`}>\n                  <p>\n                    <NavLink\n                      to={`${props.link}/${entity.name}`}\n                      className=\"green link\"\n                    >\n                      {entity.name}\n                    </NavLink>\n                    :{\" \"}\n                    {entity.value.toLocaleString(\"fullwide\", {\n                      maximumFractionDigits: 2,\n                    })}\n                  </p>\n                </Tooltip>\n              </MobileView>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n});\n\nexport default Bubble;\n","import React from \"react\";\nimport { useParams, NavLink } from \"react-router-dom\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { RootState } from \"../redux\";\nimport { connect } from \"react-redux\";\nimport { IMovieData } from \"../redux/modules/movies\";\nimport Bubble from \"./Charts/Bubble\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Breadcrumbs from \"./Breadcrumbs\";\nimport MetaTags from \"react-meta-tags\";\nimport { isBrowser } from \"react-device-detect\";\n\nexport const bubbleColors = [\n  [\"#FFF7F3\", \"#FCC5C0\", \"#FA9FB5\", \"#F768A1\", \"#DD3497\"],\n  [\"#EAFFF7\", \"#C8F3E5\", \"#A5E7D2\", \"#83DBC0\", \"#60CFAD\"],\n  [\"#DDDDDF\", \"#D0C4DF\", \"#DCABDF\", \"#C792DF\"],\n  [\"#fef9ef\", \"#ffcb77\", \"#17c3b2\", \"#227c9d\", \"#fe6d73\"],\n  [\"#598392\", \"#1a659e\", \"#ff6b35\", \"#f7c59f\", \"#efefd0\"],\n  [\"#7bdff2\", \"#b2f7ef\", \"#eff7f6\", \"#f7d6e0\", \"#f2b5d4\"],\n];\n\nconst mapStateToProps = (state: RootState) => ({\n  movies: state.movies.movies,\n});\n\nexport interface IEntity {\n  [key: string]: {\n    [key: string]: any;\n    movies: number;\n    total: number;\n    entertainment: number;\n    plot: number;\n    style: number;\n    bias: number;\n  };\n}\n\nconst titleMapping: { [key: string]: string } = {\n  Genres: \"genres\",\n  Themes: \"themes\",\n  Directors: \"director\",\n  Runtimes: \"runtime\",\n  Writers: \"writer\",\n  \"Content Ratings\": \"rated\",\n  Years: \"year\"\n};\n\ntype IProps = ReturnType<typeof mapStateToProps>;\n\n/**\n * Stat page for properties on the movie data type\n * @param props props taken from redux store\n */\nconst StatProperty = (props: IProps) => {\n  const [values, setValues] = React.useState<IEntity>({});\n  const [filter, setFilter] = React.useState<string>(\"movies\");\n  const [search, setSearch] = React.useState<string>(\"\");\n  const [results, setResults] = React.useState<string[]>([]);\n  const [listOpen, setListOpen] = React.useState<boolean>(false);\n  const [emptySearch, setEmptySearch] = React.useState<boolean>(false);\n\n  const { title } = useParams();\n  const property = titleMapping[title];\n\n  // function for developing a property hash map\n  const addValue = (\n    entities: IEntity,\n    val: any,\n    movie: IMovieData\n  ): IEntity => {\n    if (entities[val]) {\n      entities[val].movies++;\n      entities[val].total += movie.total_rating;\n      entities[val].entertainment += movie.entertainment_rating;\n      entities[val].plot += movie.plot_rating;\n      entities[val].style += movie.style_rating;\n      entities[val].bias += movie.bias_rating;\n    } else {\n      entities[val] = {\n        movies: 1,\n        total: movie.total_rating,\n        entertainment: movie.entertainment_rating,\n        plot: movie.plot_rating,\n        style: movie.style_rating,\n        bias: movie.bias_rating,\n      };\n    }\n    return entities;\n  };\n\n  // whenever the movie list is modified, generate and sort a hashmap of property values\n  React.useEffect(() => {\n    if (props.movies) {\n      let entities: IEntity = {};\n      // loop through each movie\n      props.movies.forEach((movie) => {\n        const result: any = movie[property];\n        // if the specified property is a\n        if (result instanceof Array) {\n          const arr: any[] = result;\n          arr.forEach((val: any) => {\n            entities = addValue(entities, val, movie);\n          });\n        } else {\n          entities = addValue(entities, result, movie);\n        }\n      });\n      Object.keys(entities).forEach((key) => {\n        const subEntities = Object.keys(entities[key]);\n        for (let i = 1; i < subEntities.length; i++) {\n          entities[key][subEntities[i]] = Number(\n            (entities[key][subEntities[i]] / entities[key].movies).toFixed(2)\n          );\n        }\n      });\n      setValues(entities);\n    }\n  }, [props.movies]);\n\n  const handleSearchChange = (e: any) => {\n    setEmptySearch(false);\n    setSearch(e.target.value);\n    const keys = Object.keys(values);\n    setResults(\n      keys.filter((key) =>\n        key.toLowerCase().includes(e.target.value.toLowerCase())\n      )\n    );\n    if (results.length > 0 && e.target.value.length > 0) {\n      setListOpen(true);\n    } else if (results.length === 0 && e.target.value.length > 0) {\n      setEmptySearch(true);\n    } else {\n      setListOpen(false);\n    }\n  };\n\n  const breadcrumbData = [\n    {\n      name: \"Stats\",\n      href: \"/stats\",\n    },\n    {\n      name: title,\n    },\n  ];\n\n  return (\n    <div className=\"Stats text-centered margin-top\">\n      <MetaTags>\n        <title>\n          Your personal {title.substring(0, title.length - 1)} statistics |\n          INTAKE\n        </title>\n        <meta name=\"description\" content={`See the statistics for the ${title.toLowerCase()} of your favorite movies. Sort ${title.toLowerCase()} by popularity and ratings, search for specific ${title.toLowerCase()}, and find out what your favorite ${title.toLowerCase()} are.`} />\n      </MetaTags>\n      <Breadcrumbs crumbs={breadcrumbData} />\n\n      <h1>{`${title.substring(0, title.length - 1)} Statistics`}</h1>\n      <div className=\"two-col-grid margin-top\">\n        <form onSubmit={(e) => e.preventDefault()} className={isBrowser ? \"align-right\" : \"\"}>\n          <select\n            aria-label=\"user filter\"\n            className=\"float-right margin-top stat-select\"\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n          >\n            <option value=\"movies\">Movies Seen</option>\n            <option value=\"total\">Highest Rated</option>\n            <option value=\"entertainment\">Most Entertaining</option>\n            <option value=\"plot\">Best Writing</option>\n            <option value=\"style\">Most Stylish</option>\n            <option value=\"bias\">Favorite</option>\n          </select>\n        </form>\n        <form\n          onSubmit={(e) => e.preventDefault()}\n          className=\"align-left bump-down-form\"\n        >\n          <ClickAwayListener onClickAway={() => setListOpen(false)}>\n            <div>\n              <div className=\"inline-flex\">\n                <SearchIcon className=\"form-icon\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search\"\n                  className=\"stat-search\"\n                  value={search}\n                  onChange={handleSearchChange}\n                  aria-controls=\"results-menu\"\n                  aria-haspopup=\"true\"\n                />\n              </div>\n              <List\n                component=\"nav\"\n                aria-label=\"search results\"\n                className=\"search-results\"\n                style={{ display: listOpen ? \"block\" : \"none\" }}\n              >\n                {!emptySearch ? (\n                  results.map((result) => (\n                    <NavLink\n                      to={`/stats/${titleMapping[title]}/${result}`}\n                      className=\"white link\"\n                      key={result}\n                    >\n                      <ListItem button className=\"search-result-wrapper\">\n                        <ListItemText primary={result} />\n                      </ListItem>\n                    </NavLink>\n                  ))\n                ) : (\n                  <p className=\"grey italics\" style={{ marginLeft: \"10px\" }}>\n                    No {title.toLowerCase()} match your search.\n                  </p>\n                )}\n              </List>\n            </div>\n          </ClickAwayListener>\n        </form>\n      </div>\n      <Bubble\n        values={values}\n        filter={filter}\n        link={`/stats/${titleMapping[title]}`}\n      />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(StatProperty);\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\n\nconst Loading = () => (\n  <Backdrop open={true}>\n    <CircularProgress color=\"inherit\" className=\"loading-icon\" />\n  </Backdrop>\n);\n\nexport default Loading;","import React from \"react\";\nimport { RouteProps, Route, Redirect } from \"react-router-dom\";\n\nimport { RootState } from \"../redux\";\nimport { connect } from \"react-redux\";\n\ninterface IProtectedRoute extends RouteProps {\n  redirect?: string\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & IProtectedRoute;\n\n/**\n * \n * @param props username taken from user redux store\n * @param {string} [props.redirect] redirect link for users who aren't logged in\n */\nconst UnconnectedProtectedRoute = (props: Props) => {\n  // if the user is logged in, render the requested page\n  if(props.username) {\n    return <Route {...props} />\n  }\n  // otherwise, redirect to the redirect link or to the login page\n  else {\n    return props.redirect ? <Redirect to={props.redirect} /> : <Redirect to=\"/login\" />\n  }\n}\n\nexport default connect(mapStateToProps)(UnconnectedProtectedRoute);","import React from \"react\";\nimport { RouteProps, Route, Redirect } from \"react-router-dom\";\n\nimport { RootState } from \"../redux\";\nimport { connect } from \"react-redux\";\n\ninterface ILoggedOutRoute extends RouteProps {\n  redirect?: string\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & ILoggedOutRoute;\n\n/**\n * \n * @param {Props} props component props taken from redux store\n * @param {string} props.username current user's username\n * @param {string} [props.redirect] redirect route in case of log out failure\n */\nconst UnconnectedLoggedOutRoute = (props: Props) => {\n  if(!props.username) {\n    return <Route {...props} />\n  }\n  else {\n    return props.redirect ? <Redirect to={props.redirect} /> : <Redirect to=\"/\" />\n  }\n}\n\nexport default connect(mapStateToProps)(UnconnectedLoggedOutRoute);","import React from \"react\";\n\nconst Jumbotron = () => (\n  <div className=\"jumbotron\">\n    <h1>INTAKE</h1>\n  </div>\n);\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"./Jumbotron\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport MetaTags from \"react-meta-tags\";\n\nconst LandingPage = () => (\n  <div className=\"text-centered\">\n    <MetaTags>\n      <title>Welcome to Intake. Log movies you watch - get personalized statistics. | INTAKE</title>\n      <meta name=\"description\" content=\"Intake is a tool that tracks media consumption. Add movies to your feed, rate them using our one-of-a-kind rating system, and see personalized statistics based on the movies you watch. Explore what the most popular movies on Intake are, and find new friends with similar viewing tastes.\" />\n    </MetaTags>\n    <div className=\"jumbotron-filler\"></div>\n    <div className=\"z-indexed\">\n      <a className=\"button-icon white\" type=\"button\" href=\"/#purpose\">\n        <KeyboardArrowDownIcon />\n      </a>\n      <div className=\"grid\">\n        <div id=\"purpose\" className=\"landing-entry\">\n          <h2>Mission</h2>\n          <p className='text-left indented'>\n            Intake is a tool created to track media consumption. Add movies to\n            your feed, rate them, review them, and then learn more about your\n            tastes through the use of our built-in viewing statistics.\n          </p>\n        </div>\n        <div className=\" landing-entry\">\n          <h2>Rating Movies</h2>\n          <p className=\"text-left indented\">\n            Intake stands out for the unique criteria that makes up its rating system. Each of the following categories is rated between 0 and 5:\n          </p>\n          <p className=\"text-left\">\n            <b className=\"green\"><CheckCircleOutlineIcon className=\"landing-icon\" /> Entertainment: </b>How fun was the movie?\n          </p>\n          <p className=\"text-left\">\n            <b className=\"green\"><CheckCircleOutlineIcon className=\"landing-icon\" /> Writing: </b>How strong was the plot? How about the characters?\n          </p>\n          <p className=\"text-left\">\n            <b className=\"green\"><CheckCircleOutlineIcon className=\"landing-icon\" /> Style: </b> Did the movie have a consistent and evocative style? How interesting was the cinematography?\n          </p>\n          <p className=\"text-left\">\n            <b className=\"green\"><CheckCircleOutlineIcon className=\"landing-icon\" /> Bias: </b>Sometimes the best movies aren't our favorite movies, and vice versa. Look back at the other ratings. Does the movie deserve such high praise? Was it underrated? Was it your favorite movie growing up? Use your bias to self correct and give a total rating that more accurately reflects your own personal opinion.\n          </p>\n        </div>\n      </div>\n\n      <Jumbotron />\n    </div>\n  </div>\n);\n\nexport default LandingPage;\n","import React from \"react\";\nimport \"../Styles/Login.css\";\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport MetaTags from \"react-meta-tags\";\nimport { useParams, NavLink } from \"react-router-dom\";\nimport Loading from \"./Loading\";\n\n/**\n * Component that renders a verification form / sends a verification email to uesr\n */\nconst Verify = () => {\n  const [email, setEmail] = React.useState<string>(\"\");\n  const [finished, setFinished] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<boolean>(false);\n  const { token } = useParams();\n\n  // if the url contains a token, verify that token with api request\n  React.useEffect(() => {\n    const asyncOps = async () => {\n      const response = await fetch(`/api/user/verifyAccount/${token}`);\n      if (response.status === 200) {\n        setFinished(true);\n      } else {\n        setFinished(true);\n        setError(true);\n      }\n    };\n    if(token){\n      asyncOps();\n    }\n  }, [token]);\n\n  if (token) {\n    // render a message based on the api request result\n    return finished ? (\n      <div className=\"text-centered\">\n        <MetaTags>\n          <title>Verify your Intake account. | INTAKE</title>\n          <meta\n            name=\"description\"\n            content=\"Send a verification email to the email linked to your Intake account to begin using Intake.\"\n          />\n        </MetaTags>\n        <h1>Verify Intake Account</h1>\n        {error ? (\n          <p>\n            Invalid verification token. Please\n            <NavLink to=\"/verify\" className=\"green link\">\n              {\" \"}\n              request another one{\" \"}\n            </NavLink>\n            .\n          </p>\n        ) : (\n          <p>\n            Your account has been verified. Please return to{\" \"}\n            <NavLink to=\"/login\" className=\"green link\">\n              login\n            </NavLink>\n            .\n          </p>\n        )}\n      </div>\n    ) : (\n      <Loading />\n    );\n  }\n\n  // make an api request to send verification email\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    const response = await fetch(\"/api/user/sendVerificationToken\", {\n      method: \"post\",\n      body: JSON.stringify({ email }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    console.log(response);\n  };\n\n  return (\n    <div className=\"Login text-centered margin-top\">\n      <MetaTags>\n        <title>Verify your Intake account. | INTAKE</title>\n        <meta\n          name=\"description\"\n          content=\"Send a verification email to the email linked to your Intake account to begin using Intake.\"\n        />\n      </MetaTags>\n      <h1>Verify Intake Account</h1>\n      <div className=\"vertical-padding\"></div>\n      <form onSubmit={handleSubmit} className=\"text-centered login-form\">\n        <div className=\"inline-flex\">\n          <AccountBoxIcon />\n          <input\n            type=\"text\"\n            placeholder=\"Email\"\n            className=\"input-large margin-left\"\n            value={email}\n            onChange={(e: any) => setEmail(e.target.value)}\n          />\n        </div>\n        <button type=\"submit\" className=\"button-submit float-right margin-top\">\n          Send Verification Email\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Verify;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport \"./Styles/Positions.css\";\nimport \"./Styles/Elements.css\";\nimport \"./Styles/App.css\";\nimport \"./Styles/AppPhone.css\";\nimport Header from \"./Components/Header\";\nimport Movies from \"./Components/Movies\";\nimport Stats from \"./Components/Stats\";\nimport MovieRatings from \"./Components/MovieRatings\";\nimport Login from \"./Components/Login\";\nimport CreateAccount from \"./Components/CreateAccount\";\nimport Profile from \"./Components/Profile\";\nimport ResetPassword from \"./Components/ResetPassword\";\nimport Explore from \"./Components/Explore\";\nimport StatProperty from \"./Components/StatProperty\";\nimport Loading from \"./Components/Loading\";\nimport ProtectedRoute from \"./Components/ProtectedRoute\";\nimport LoggedOutRoute from \"./Components/LoggedOutRoute\";\nimport LandingPage from \"./Components/LandingPage\";\nimport Verify from \"./Components/Verify\";\n\nimport { RootState } from \"./redux\";\nimport { connect } from \"react-redux\";\nimport { checkSessionLogin } from \"./redux/modules/user\";\nimport { loadMovies } from \"./redux/modules/movies\";\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username,\n  movies: state.movies.movies,\n  guest: state.user.guest,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ checkSessionLogin, loadMovies }, dispatch);\n\ntype IApp = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst UnconnectedApp: React.FC<IApp> = ({\n  username,\n  guest,\n  checkSessionLogin,\n  loadMovies,\n  movies,\n}) => {\n  if (!username && !guest) {\n    checkSessionLogin();\n    return <Loading />;\n  }\n  if (!movies && username) {\n    loadMovies();\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Switch>\n          {/* Movie Routes */}\n          <ProtectedRoute path=\"/movies/:id\" render={() => <MovieRatings />} />\n          <ProtectedRoute path=\"/movies\" render={() => <Movies />} />\n          {/* Stats Route */}\n          <ProtectedRoute path=\"/stats/:property/:value\" component={Stats} />\n          <ProtectedRoute path=\"/stats/:title\" component={StatProperty} />\n          <ProtectedRoute path=\"/stats\" component={Stats} />\n          {/* Login Route */}\n          <LoggedOutRoute path=\"/login\" component={Login} />\n          <LoggedOutRoute path=\"/verify/:token\" component={Verify} />\n          <LoggedOutRoute path=\"/verify\" component={Verify} />\n          <LoggedOutRoute path=\"/createAccount\" component={CreateAccount} />\n          <LoggedOutRoute\n            path=\"/resetPassword/:id/:token\"\n            component={ResetPassword}\n          />\n          <LoggedOutRoute path=\"/resetPassword\" component={ResetPassword} />\n          {/* Profile Route */}\n          <ProtectedRoute path=\"/profile\" component={Profile} />\n          {/* Explore Route */}\n          <Route path=\"/explore/:type/:id\" component={Explore} />\n          <Route path=\"/explore/\" component={Explore} />\n          {/* verofy */}\n          {/* Home Route */}\n          <Route path=\"/\">\n            <LandingPage />\n          </Route>\n        </Switch>\n        <div className=\"footer\">© JACKSON PROWELL</div>\n      </Router>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnconnectedApp);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { userReducer } from \"./modules/user\";\nimport { movieReducer } from \"./modules/movies\";\nimport { exploreReducer } from \"./modules/explore\";\nimport {statsReducer} from \"./modules/stats\";\n\n// reducer combiner\nexport const rootReducer = combineReducers({\n  user: userReducer,\n  movies: movieReducer,\n  explore: exploreReducer,\n  stats: statsReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {rootReducer} from \"./redux\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}